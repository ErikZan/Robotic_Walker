
USB_Communication_Tests_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006818  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080069ac  080069ac  000169ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a14  08006a14  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08006a14  08006a14  00016a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a1c  08006a1c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a1c  08006a1c  00016a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08006a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b60  20000184  08006ba8  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ce4  08006ba8  00021ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149fa  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000309b  00000000  00000000  00034bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00037c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00038968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001861e  00000000  00000000  00039568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001002e  00000000  00000000  00051b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008863a  00000000  00000000  00061bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea1ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e4  00000000  00000000  000ea244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000184 	.word	0x20000184
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006994 	.word	0x08006994

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000188 	.word	0x20000188
 80001d0:	08006994 	.word	0x08006994

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b96e 	b.w	80004d8 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468c      	mov	ip, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	f040 8083 	bne.w	800032a <__udivmoddi4+0x116>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d947      	bls.n	80002ba <__udivmoddi4+0xa6>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b142      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 8000230:	f1c2 0020 	rsb	r0, r2, #32
 8000234:	fa24 f000 	lsr.w	r0, r4, r0
 8000238:	4091      	lsls	r1, r2
 800023a:	4097      	lsls	r7, r2
 800023c:	ea40 0c01 	orr.w	ip, r0, r1
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbbc f6f8 	udiv	r6, ip, r8
 800024c:	fa1f fe87 	uxth.w	lr, r7
 8000250:	fb08 c116 	mls	r1, r8, r6, ip
 8000254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000258:	fb06 f10e 	mul.w	r1, r6, lr
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 8119 	bcs.w	800049c <__udivmoddi4+0x288>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8116 	bls.w	800049c <__udivmoddi4+0x288>
 8000270:	3e02      	subs	r6, #2
 8000272:	443b      	add	r3, r7
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	45a6      	cmp	lr, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	193c      	adds	r4, r7, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000292:	f080 8105 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 8000296:	45a6      	cmp	lr, r4
 8000298:	f240 8102 	bls.w	80004a0 <__udivmoddi4+0x28c>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a4:	eba4 040e 	sub.w	r4, r4, lr
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	b902      	cbnz	r2, 80002be <__udivmoddi4+0xaa>
 80002bc:	deff      	udf	#255	; 0xff
 80002be:	fab2 f282 	clz	r2, r2
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d150      	bne.n	8000368 <__udivmoddi4+0x154>
 80002c6:	1bcb      	subs	r3, r1, r7
 80002c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002cc:	fa1f f887 	uxth.w	r8, r7
 80002d0:	2601      	movs	r6, #1
 80002d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e0:	fb08 f30c 	mul.w	r3, r8, ip
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xe4>
 80002e8:	1879      	adds	r1, r7, r1
 80002ea:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0xe2>
 80002f0:	428b      	cmp	r3, r1
 80002f2:	f200 80e9 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 80002f6:	4684      	mov	ip, r0
 80002f8:	1ac9      	subs	r1, r1, r3
 80002fa:	b2a3      	uxth	r3, r4
 80002fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000300:	fb0e 1110 	mls	r1, lr, r0, r1
 8000304:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000308:	fb08 f800 	mul.w	r8, r8, r0
 800030c:	45a0      	cmp	r8, r4
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x10c>
 8000310:	193c      	adds	r4, r7, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x10a>
 8000318:	45a0      	cmp	r8, r4
 800031a:	f200 80d9 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 800031e:	4618      	mov	r0, r3
 8000320:	eba4 0408 	sub.w	r4, r4, r8
 8000324:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000328:	e7bf      	b.n	80002aa <__udivmoddi4+0x96>
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x12e>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80b1 	beq.w	8000496 <__udivmoddi4+0x282>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x1cc>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0x140>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80b8 	bhi.w	80004c4 <__udivmoddi4+0x2b0>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0103 	sbc.w	r1, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	468c      	mov	ip, r1
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0a8      	beq.n	80002b4 <__udivmoddi4+0xa0>
 8000362:	e9c5 4c00 	strd	r4, ip, [r5]
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000368:	f1c2 0320 	rsb	r3, r2, #32
 800036c:	fa20 f603 	lsr.w	r6, r0, r3
 8000370:	4097      	lsls	r7, r2
 8000372:	fa01 f002 	lsl.w	r0, r1, r2
 8000376:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037a:	40d9      	lsrs	r1, r3
 800037c:	4330      	orrs	r0, r6
 800037e:	0c03      	lsrs	r3, r0, #16
 8000380:	fbb1 f6fe 	udiv	r6, r1, lr
 8000384:	fa1f f887 	uxth.w	r8, r7
 8000388:	fb0e 1116 	mls	r1, lr, r6, r1
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f108 	mul.w	r1, r6, r8
 8000394:	4299      	cmp	r1, r3
 8000396:	fa04 f402 	lsl.w	r4, r4, r2
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x19c>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003a2:	f080 808d 	bcs.w	80004c0 <__udivmoddi4+0x2ac>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 808a 	bls.w	80004c0 <__udivmoddi4+0x2ac>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b281      	uxth	r1, r0
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c0:	fb00 f308 	mul.w	r3, r0, r8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x1c4>
 80003c8:	1879      	adds	r1, r7, r1
 80003ca:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ce:	d273      	bcs.n	80004b8 <__udivmoddi4+0x2a4>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d971      	bls.n	80004b8 <__udivmoddi4+0x2a4>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4439      	add	r1, r7
 80003d8:	1acb      	subs	r3, r1, r3
 80003da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003de:	e778      	b.n	80002d2 <__udivmoddi4+0xbe>
 80003e0:	f1c6 0c20 	rsb	ip, r6, #32
 80003e4:	fa03 f406 	lsl.w	r4, r3, r6
 80003e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003ec:	431c      	orrs	r4, r3
 80003ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fe:	431f      	orrs	r7, r3
 8000400:	0c3b      	lsrs	r3, r7, #16
 8000402:	fbb1 f9fe 	udiv	r9, r1, lr
 8000406:	fa1f f884 	uxth.w	r8, r4
 800040a:	fb0e 1119 	mls	r1, lr, r9, r1
 800040e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000412:	fb09 fa08 	mul.w	sl, r9, r8
 8000416:	458a      	cmp	sl, r1
 8000418:	fa02 f206 	lsl.w	r2, r2, r6
 800041c:	fa00 f306 	lsl.w	r3, r0, r6
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x220>
 8000422:	1861      	adds	r1, r4, r1
 8000424:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000428:	d248      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800042a:	458a      	cmp	sl, r1
 800042c:	d946      	bls.n	80004bc <__udivmoddi4+0x2a8>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	4421      	add	r1, r4
 8000434:	eba1 010a 	sub.w	r1, r1, sl
 8000438:	b2bf      	uxth	r7, r7
 800043a:	fbb1 f0fe 	udiv	r0, r1, lr
 800043e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000442:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000446:	fb00 f808 	mul.w	r8, r0, r8
 800044a:	45b8      	cmp	r8, r7
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x24a>
 800044e:	19e7      	adds	r7, r4, r7
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d22e      	bcs.n	80004b4 <__udivmoddi4+0x2a0>
 8000456:	45b8      	cmp	r8, r7
 8000458:	d92c      	bls.n	80004b4 <__udivmoddi4+0x2a0>
 800045a:	3802      	subs	r0, #2
 800045c:	4427      	add	r7, r4
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	eba7 0708 	sub.w	r7, r7, r8
 8000466:	fba0 8902 	umull	r8, r9, r0, r2
 800046a:	454f      	cmp	r7, r9
 800046c:	46c6      	mov	lr, r8
 800046e:	4649      	mov	r1, r9
 8000470:	d31a      	bcc.n	80004a8 <__udivmoddi4+0x294>
 8000472:	d017      	beq.n	80004a4 <__udivmoddi4+0x290>
 8000474:	b15d      	cbz	r5, 800048e <__udivmoddi4+0x27a>
 8000476:	ebb3 020e 	subs.w	r2, r3, lr
 800047a:	eb67 0701 	sbc.w	r7, r7, r1
 800047e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000482:	40f2      	lsrs	r2, r6
 8000484:	ea4c 0202 	orr.w	r2, ip, r2
 8000488:	40f7      	lsrs	r7, r6
 800048a:	e9c5 2700 	strd	r2, r7, [r5]
 800048e:	2600      	movs	r6, #0
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e70b      	b.n	80002b4 <__udivmoddi4+0xa0>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e9      	b.n	8000274 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fd      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a4:	4543      	cmp	r3, r8
 80004a6:	d2e5      	bcs.n	8000474 <__udivmoddi4+0x260>
 80004a8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ac:	eb69 0104 	sbc.w	r1, r9, r4
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7df      	b.n	8000474 <__udivmoddi4+0x260>
 80004b4:	4608      	mov	r0, r1
 80004b6:	e7d2      	b.n	800045e <__udivmoddi4+0x24a>
 80004b8:	4660      	mov	r0, ip
 80004ba:	e78d      	b.n	80003d8 <__udivmoddi4+0x1c4>
 80004bc:	4681      	mov	r9, r0
 80004be:	e7b9      	b.n	8000434 <__udivmoddi4+0x220>
 80004c0:	4666      	mov	r6, ip
 80004c2:	e775      	b.n	80003b0 <__udivmoddi4+0x19c>
 80004c4:	4630      	mov	r0, r6
 80004c6:	e74a      	b.n	800035e <__udivmoddi4+0x14a>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	4439      	add	r1, r7
 80004ce:	e713      	b.n	80002f8 <__udivmoddi4+0xe4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	e724      	b.n	8000320 <__udivmoddi4+0x10c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b598      	push	{r3, r4, r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa0a 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f81a 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8b0 	bl	800064c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f884 	bl	80005f8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004f0:	f005 fd0a 	bl	8005f08 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS((uint8_t *)data,strlen(data));
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <main+0x3c>)
 80004f6:	681c      	ldr	r4, [r3, #0]
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <main+0x3c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fe69 	bl	80001d4 <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	b29b      	uxth	r3, r3
 8000506:	4619      	mov	r1, r3
 8000508:	4620      	mov	r0, r4
 800050a:	f005 fdbb 	bl	8006084 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 800050e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000512:	f000 fa63 	bl	80009dc <HAL_Delay>
	  CDC_Transmit_FS((uint8_t *)data,strlen(data));
 8000516:	e7ed      	b.n	80004f4 <main+0x18>
 8000518:	20000000 	.word	0x20000000

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f006 fa2a 	bl	8006984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <SystemClock_Config+0xd4>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a29      	ldr	r2, [pc, #164]	; (80005f0 <SystemClock_Config+0xd4>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <SystemClock_Config+0xd4>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <SystemClock_Config+0xd8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <SystemClock_Config+0xd8>)
 800056a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <SystemClock_Config+0xd8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800057c:	2303      	movs	r3, #3
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000580:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2310      	movs	r3, #16
 800058c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800059c:	2348      	movs	r3, #72	; 0x48
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005a4:	2303      	movs	r3, #3
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fe6b 	bl	8002288 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005b8:	f000 f8b8 	bl	800072c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 f8cd 	bl	8002778 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80005e4:	f000 f8a2 	bl	800072c <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	; 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_USART2_UART_Init+0x50>)
 8000600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000630:	f002 fa9e 	bl	8002b70 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800063a:	f000 f877 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200003c4 	.word	0x200003c4
 8000648:	40004400 	.word	0x40004400

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a2c      	ldr	r2, [pc, #176]	; (800071c <MX_GPIO_Init+0xd0>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <MX_GPIO_Init+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a25      	ldr	r2, [pc, #148]	; (800071c <MX_GPIO_Init+0xd0>)
 8000688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_GPIO_Init+0xd0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a1e      	ldr	r2, [pc, #120]	; (800071c <MX_GPIO_Init+0xd0>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_GPIO_Init+0xd0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <MX_GPIO_Init+0xd0>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	4812      	ldr	r0, [pc, #72]	; (8000720 <MX_GPIO_Init+0xd4>)
 80006d8:	f000 fc3a 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_GPIO_Init+0xd8>)
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_GPIO_Init+0xdc>)
 80006f2:	f000 faa9 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006f6:	2320      	movs	r3, #32
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_GPIO_Init+0xd4>)
 800070e:	f000 fa9b 	bl	8000c48 <HAL_GPIO_Init>

}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40020000 	.word	0x40020000
 8000724:	10210000 	.word	0x10210000
 8000728:	40020800 	.word	0x40020800

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <HAL_MspInit+0x4c>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6453      	str	r3, [r2, #68]	; 0x44
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_MspInit+0x4c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	; 0x40
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000776:	2007      	movs	r0, #7
 8000778:	f000 fa24 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40023800 	.word	0x40023800

08000788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a19      	ldr	r2, [pc, #100]	; (800080c <HAL_UART_MspInit+0x84>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d12b      	bne.n	8000802 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_UART_MspInit+0x88>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <HAL_UART_MspInit+0x88>)
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <HAL_UART_MspInit+0x88>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <HAL_UART_MspInit+0x88>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a10      	ldr	r2, [pc, #64]	; (8000810 <HAL_UART_MspInit+0x88>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_UART_MspInit+0x88>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007e2:	230c      	movs	r3, #12
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f2:	2307      	movs	r3, #7
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <HAL_UART_MspInit+0x8c>)
 80007fe:	f000 fa23 	bl	8000c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40004400 	.word	0x40004400
 8000810:	40023800 	.word	0x40023800
 8000814:	40020000 	.word	0x40020000

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f89a 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <OTG_FS_IRQHandler+0x10>)
 8000872:	f000 fcd6 	bl	8001222 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200018dc 	.word	0x200018dc

08000880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008aa:	490e      	ldr	r1, [pc, #56]	; (80008e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008c0:	4c0b      	ldr	r4, [pc, #44]	; (80008f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008ce:	f7ff ffd7 	bl	8000880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f006 f833 	bl	800693c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fe01 	bl	80004dc <main>
  bx  lr    
 80008da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80008e8:	08006a24 	.word	0x08006a24
  ldr r2, =_sbss
 80008ec:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80008f0:	20001ce4 	.word	0x20001ce4

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <HAL_Init+0x40>)
 8000902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_Init+0x40>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_Init+0x40>)
 800091a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800091e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f94f 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	2000      	movs	r0, #0
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff ff04 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f967 	bl	8000c2e <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000978:	f000 f92f 	bl	8000bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000004 	.word	0x20000004
 8000994:	2000000c 	.word	0x2000000c
 8000998:	20000008 	.word	0x20000008

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	2000000c 	.word	0x2000000c
 80009c0:	20000408 	.word	0x20000408

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000408 	.word	0x20000408

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff ffee 	bl	80009c4 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_Delay+0x44>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a02:	bf00      	nop
 8000a04:	f7ff ffde 	bl	80009c4 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000000c 	.word	0x2000000c

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4907      	ldr	r1, [pc, #28]	; (8000ac0 <__NVIC_EnableIRQ+0x38>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	; (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	; (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	; 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b90:	d301      	bcc.n	8000b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00f      	b.n	8000bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <SysTick_Config+0x40>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f7ff ff8e 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SysTick_Config+0x40>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <SysTick_Config+0x40>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff29 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff3e 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff8e 	bl	8000b18 <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5d 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff31 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffa2 	bl	8000b80 <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	e159      	b.n	8000f18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c64:	2201      	movs	r2, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f040 8148 	bne.w	8000f12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d005      	beq.n	8000c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d130      	bne.n	8000cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	091b      	lsrs	r3, r3, #4
 8000ce6:	f003 0201 	and.w	r2, r3, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d017      	beq.n	8000d38 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d123      	bne.n	8000d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	08da      	lsrs	r2, r3, #3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3208      	adds	r2, #8
 8000d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	691a      	ldr	r2, [r3, #16]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	08da      	lsrs	r2, r3, #3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3208      	adds	r2, #8
 8000d86:	69b9      	ldr	r1, [r7, #24]
 8000d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0203 	and.w	r2, r3, #3
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 80a2 	beq.w	8000f12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b57      	ldr	r3, [pc, #348]	; (8000f30 <HAL_GPIO_Init+0x2e8>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a56      	ldr	r2, [pc, #344]	; (8000f30 <HAL_GPIO_Init+0x2e8>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b54      	ldr	r3, [pc, #336]	; (8000f30 <HAL_GPIO_Init+0x2e8>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dea:	4a52      	ldr	r2, [pc, #328]	; (8000f34 <HAL_GPIO_Init+0x2ec>)
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3302      	adds	r3, #2
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	220f      	movs	r2, #15
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a49      	ldr	r2, [pc, #292]	; (8000f38 <HAL_GPIO_Init+0x2f0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d019      	beq.n	8000e4a <HAL_GPIO_Init+0x202>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a48      	ldr	r2, [pc, #288]	; (8000f3c <HAL_GPIO_Init+0x2f4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d013      	beq.n	8000e46 <HAL_GPIO_Init+0x1fe>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a47      	ldr	r2, [pc, #284]	; (8000f40 <HAL_GPIO_Init+0x2f8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d00d      	beq.n	8000e42 <HAL_GPIO_Init+0x1fa>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a46      	ldr	r2, [pc, #280]	; (8000f44 <HAL_GPIO_Init+0x2fc>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d007      	beq.n	8000e3e <HAL_GPIO_Init+0x1f6>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a45      	ldr	r2, [pc, #276]	; (8000f48 <HAL_GPIO_Init+0x300>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d101      	bne.n	8000e3a <HAL_GPIO_Init+0x1f2>
 8000e36:	2304      	movs	r3, #4
 8000e38:	e008      	b.n	8000e4c <HAL_GPIO_Init+0x204>
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x204>
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e004      	b.n	8000e4c <HAL_GPIO_Init+0x204>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e002      	b.n	8000e4c <HAL_GPIO_Init+0x204>
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <HAL_GPIO_Init+0x204>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	f002 0203 	and.w	r2, r2, #3
 8000e52:	0092      	lsls	r2, r2, #2
 8000e54:	4093      	lsls	r3, r2
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e5c:	4935      	ldr	r1, [pc, #212]	; (8000f34 <HAL_GPIO_Init+0x2ec>)
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e6a:	4b38      	ldr	r3, [pc, #224]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e8e:	4a2f      	ldr	r2, [pc, #188]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e94:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eb8:	4a24      	ldr	r2, [pc, #144]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee2:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	2b0f      	cmp	r3, #15
 8000f1c:	f67f aea2 	bls.w	8000c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40013800 	.word	0x40013800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40013c00 	.word	0x40013c00

08000f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f60:	787b      	ldrb	r3, [r7, #1]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f6c:	e003      	b.n	8000f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	041a      	lsls	r2, r3, #16
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f84:	b08f      	sub	sp, #60	; 0x3c
 8000f86:	af0a      	add	r7, sp, #40	; 0x28
 8000f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e10f      	b.n	80011b4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d106      	bne.n	8000fb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f005 f9b0 	bl	8006314 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 f8f7 	bl	80031c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	687e      	ldr	r6, [r7, #4]
 8000fe0:	466d      	mov	r5, sp
 8000fe2:	f106 0410 	add.w	r4, r6, #16
 8000fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ff6:	1d33      	adds	r3, r6, #4
 8000ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ffa:	6838      	ldr	r0, [r7, #0]
 8000ffc:	f001 ffce 	bl	8002f9c <USB_CoreInit>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2202      	movs	r2, #2
 800100a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e0d0      	b.n	80011b4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f002 f8e5 	bl	80031e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e04a      	b.n	80010ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	1a9b      	subs	r3, r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	333d      	adds	r3, #61	; 0x3d
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	1a9b      	subs	r3, r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	333c      	adds	r3, #60	; 0x3c
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	b298      	uxth	r0, r3
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	1a9b      	subs	r3, r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	3342      	adds	r3, #66	; 0x42
 8001060:	4602      	mov	r2, r0
 8001062:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	1a9b      	subs	r3, r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	333f      	adds	r3, #63	; 0x3f
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	1a9b      	subs	r3, r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	3344      	adds	r3, #68	; 0x44
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	1a9b      	subs	r3, r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	3348      	adds	r3, #72	; 0x48
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	3350      	adds	r3, #80	; 0x50
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	3301      	adds	r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3af      	bcc.n	8001024 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e044      	b.n	8001154 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	1a9b      	subs	r3, r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	1a9b      	subs	r3, r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	3301      	adds	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	429a      	cmp	r2, r3
 800115c:	d3b5      	bcc.n	80010ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	687e      	ldr	r6, [r7, #4]
 8001166:	466d      	mov	r5, sp
 8001168:	f106 0410 	add.w	r4, r6, #16
 800116c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001174:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001178:	e885 0003 	stmia.w	r5, {r0, r1}
 800117c:	1d33      	adds	r3, r6, #4
 800117e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f002 f85b 	bl	800323c <USB_DevInit>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2202      	movs	r2, #2
 8001190:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e00d      	b.n	80011b4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f8a3 	bl	80042f8 <USB_DevDisconnect>

  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_PCD_Start+0x1c>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e020      	b.n	800121a <HAL_PCD_Start+0x5e>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d109      	bne.n	80011fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d005      	beq.n	80011fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f001 ffcf 	bl	80031a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f003 f853 	bl	80042b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001222:	b590      	push	{r4, r7, lr}
 8001224:	b08d      	sub	sp, #52	; 0x34
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f003 f911 	bl	8004460 <USB_GetMode>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	f040 839d 	bne.w	8001980 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f003 f875 	bl	800433a <USB_ReadInterrupts>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8393 	beq.w	800197e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f003 f86c 	bl	800433a <USB_ReadInterrupts>
 8001262:	4603      	mov	r3, r0
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b02      	cmp	r3, #2
 800126a:	d107      	bne.n	800127c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f002 0202 	and.w	r2, r2, #2
 800127a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f003 f85a 	bl	800433a <USB_ReadInterrupts>
 8001286:	4603      	mov	r3, r0
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	2b10      	cmp	r3, #16
 800128e:	d161      	bne.n	8001354 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0210 	bic.w	r2, r2, #16
 800129e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	f003 020f 	and.w	r2, r3, #15
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	1a9b      	subs	r3, r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	3304      	adds	r3, #4
 80012be:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	0c5b      	lsrs	r3, r3, #17
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d124      	bne.n	8001316 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d035      	beq.n	8001344 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	6a38      	ldr	r0, [r7, #32]
 80012ec:	f002 fec0 	bl	8004070 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012fc:	441a      	add	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	699a      	ldr	r2, [r3, #24]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800130e:	441a      	add	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	619a      	str	r2, [r3, #24]
 8001314:	e016      	b.n	8001344 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	0c5b      	lsrs	r3, r3, #17
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	2b06      	cmp	r3, #6
 8001320:	d110      	bne.n	8001344 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001328:	2208      	movs	r2, #8
 800132a:	4619      	mov	r1, r3
 800132c:	6a38      	ldr	r0, [r7, #32]
 800132e:	f002 fe9f 	bl	8004070 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	699a      	ldr	r2, [r3, #24]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800133e:	441a      	add	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	699a      	ldr	r2, [r3, #24]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0210 	orr.w	r2, r2, #16
 8001352:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f002 ffee 	bl	800433a <USB_ReadInterrupts>
 800135e:	4603      	mov	r3, r0
 8001360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001364:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001368:	d16e      	bne.n	8001448 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f002 fff4 	bl	8004360 <USB_ReadDevAllOutEpInterrupt>
 8001378:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800137a:	e062      	b.n	8001442 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d057      	beq.n	8001436 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f003 f819 	bl	80043c8 <USB_ReadDevOutEPInterrupt>
 8001396:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00c      	beq.n	80013bc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	015a      	lsls	r2, r3, #5
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	4413      	add	r3, r2
 80013aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ae:	461a      	mov	r2, r3
 80013b0:	2301      	movs	r3, #1
 80013b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 fdb0 	bl	8001f1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00c      	beq.n	80013e0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	015a      	lsls	r2, r3, #5
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	4413      	add	r3, r2
 80013ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d2:	461a      	mov	r2, r3
 80013d4:	2308      	movs	r3, #8
 80013d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 feaa 	bl	8002134 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	015a      	lsls	r2, r3, #5
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f6:	461a      	mov	r2, r3
 80013f8:	2310      	movs	r3, #16
 80013fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f003 0320 	and.w	r3, r3, #32
 8001402:	2b00      	cmp	r3, #0
 8001404:	d008      	beq.n	8001418 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	4413      	add	r3, r2
 800140e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001412:	461a      	mov	r2, r3
 8001414:	2320      	movs	r3, #32
 8001416:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d009      	beq.n	8001436 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	015a      	lsls	r2, r3, #5
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	4413      	add	r3, r2
 800142a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800142e:	461a      	mov	r2, r3
 8001430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001434:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	3301      	adds	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001444:	2b00      	cmp	r3, #0
 8001446:	d199      	bne.n	800137c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f002 ff74 	bl	800433a <USB_ReadInterrupts>
 8001452:	4603      	mov	r3, r0
 8001454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001458:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800145c:	f040 80c0 	bne.w	80015e0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f002 ff95 	bl	8004394 <USB_ReadDevAllInEpInterrupt>
 800146a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001470:	e0b2      	b.n	80015d8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80a7 	beq.w	80015cc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f002 ffbb 	bl	8004404 <USB_ReadDevInEPInterrupt>
 800148e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d057      	beq.n	800154a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	2201      	movs	r2, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69f9      	ldr	r1, [r7, #28]
 80014b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014ba:	4013      	ands	r3, r2
 80014bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ca:	461a      	mov	r2, r3
 80014cc:	2301      	movs	r3, #1
 80014ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d132      	bne.n	800153e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	3348      	adds	r3, #72	; 0x48
 80014e8:	6819      	ldr	r1, [r3, #0]
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4403      	add	r3, r0
 80014f8:	3344      	adds	r3, #68	; 0x44
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4419      	add	r1, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001502:	4613      	mov	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4403      	add	r3, r0
 800150c:	3348      	adds	r3, #72	; 0x48
 800150e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	2b00      	cmp	r3, #0
 8001514:	d113      	bne.n	800153e <HAL_PCD_IRQHandler+0x31c>
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151a:	4613      	mov	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	3350      	adds	r3, #80	; 0x50
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d108      	bne.n	800153e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001536:	461a      	mov	r2, r3
 8001538:	2101      	movs	r1, #1
 800153a:	f002 ffc3 	bl	80044c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f004 ff66 	bl	8006416 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	4413      	add	r3, r2
 800155c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001560:	461a      	mov	r2, r3
 8001562:	2308      	movs	r3, #8
 8001564:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	015a      	lsls	r2, r3, #5
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	4413      	add	r3, r2
 8001578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800157c:	461a      	mov	r2, r3
 800157e:	2310      	movs	r3, #16
 8001580:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001598:	461a      	mov	r2, r3
 800159a:	2340      	movs	r3, #64	; 0x40
 800159c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	015a      	lsls	r2, r3, #5
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b4:	461a      	mov	r2, r3
 80015b6:	2302      	movs	r3, #2
 80015b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fc1b 	bl	8001e02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	3301      	adds	r3, #1
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f47f af49 	bne.w	8001472 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fea8 	bl	800433a <USB_ReadInterrupts>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015f4:	d122      	bne.n	800163c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001610:	2b01      	cmp	r3, #1
 8001612:	d108      	bne.n	8001626 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800161c:	2100      	movs	r1, #0
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fe26 	bl	8002270 <HAL_PCDEx_LPM_Callback>
 8001624:	e002      	b.n	800162c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f004 ff6c 	bl	8006504 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800163a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fe7a 	bl	800433a <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800164c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001650:	d112      	bne.n	8001678 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b01      	cmp	r3, #1
 8001660:	d102      	bne.n	8001668 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f004 ff28 	bl	80064b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001676:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f002 fe5c 	bl	800433a <USB_ReadInterrupts>
 8001682:	4603      	mov	r3, r0
 8001684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800168c:	f040 80c7 	bne.w	800181e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2110      	movs	r1, #16
 80016aa:	4618      	mov	r0, r3
 80016ac:	f001 ff2a 	bl	8003504 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b4:	e056      	b.n	8001764 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b8:	015a      	lsls	r2, r3, #5
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016c2:	461a      	mov	r2, r3
 80016c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	015a      	lsls	r2, r3, #5
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016da:	0151      	lsls	r1, r2, #5
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	440a      	add	r2, r1
 80016e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016e8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ec:	015a      	lsls	r2, r3, #5
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	4413      	add	r3, r2
 80016f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016fa:	0151      	lsls	r1, r2, #5
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	440a      	add	r2, r1
 8001700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001704:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001708:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001716:	461a      	mov	r2, r3
 8001718:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800171c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172e:	0151      	lsls	r1, r2, #5
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	440a      	add	r2, r1
 8001734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001738:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800173c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001740:	015a      	lsls	r2, r3, #5
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174e:	0151      	lsls	r1, r2, #5
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	440a      	add	r2, r1
 8001754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001758:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800175c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	3301      	adds	r3, #1
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800176a:	429a      	cmp	r2, r3
 800176c:	d3a3      	bcc.n	80016b6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800177c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001780:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	2b00      	cmp	r3, #0
 8001788:	d016      	beq.n	80017b8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179a:	f043 030b 	orr.w	r3, r3, #11
 800179e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b0:	f043 030b 	orr.w	r3, r3, #11
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	e015      	b.n	80017e4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017de:	f043 030b 	orr.w	r3, r3, #11
 80017e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001808:	461a      	mov	r2, r3
 800180a:	f002 fe5b 	bl	80044c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800181c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f002 fd89 	bl	800433a <USB_ReadInterrupts>
 8001828:	4603      	mov	r3, r0
 800182a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800182e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001832:	d124      	bne.n	800187e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f002 fe1f 	bl	800447c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f001 febf 	bl	80035c6 <USB_GetDevSpeed>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681c      	ldr	r4, [r3, #0]
 8001854:	f001 f958 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8001858:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800185e:	b2db      	uxtb	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	4620      	mov	r0, r4
 8001864:	f001 fbfc 	bl	8003060 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f004 fdfc 	bl	8006466 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800187c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f002 fd59 	bl	800433a <USB_ReadInterrupts>
 8001888:	4603      	mov	r3, r0
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b08      	cmp	r3, #8
 8001890:	d10a      	bne.n	80018a8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f004 fdd9 	bl	800644a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f002 0208 	and.w	r2, r2, #8
 80018a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fd44 	bl	800433a <USB_ReadInterrupts>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018bc:	d10f      	bne.n	80018de <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f004 fe3b 	bl	8006544 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fd29 	bl	800433a <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018f2:	d10f      	bne.n	8001914 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f004 fe0e 	bl	8006520 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fd0e 	bl	800433a <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001928:	d10a      	bne.n	8001940 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f004 fe1c 	bl	8006568 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800193e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f002 fcf8 	bl	800433a <USB_ReadInterrupts>
 800194a:	4603      	mov	r3, r0
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b04      	cmp	r3, #4
 8001952:	d115      	bne.n	8001980 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f004 fe0c 	bl	8006584 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6859      	ldr	r1, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	430a      	orrs	r2, r1
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	e000      	b.n	8001980 <HAL_PCD_IRQHandler+0x75e>
      return;
 800197e:	bf00      	nop
    }
  }
}
 8001980:	3734      	adds	r7, #52	; 0x34
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}

08001986 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_PCD_SetAddress+0x1a>
 800199c:	2302      	movs	r3, #2
 800199e:	e013      	b.n	80019c8 <HAL_PCD_SetAddress+0x42>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 fc56 	bl	800426a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	70fb      	strb	r3, [r7, #3]
 80019e2:	460b      	mov	r3, r1
 80019e4:	803b      	strh	r3, [r7, #0]
 80019e6:	4613      	mov	r3, r2
 80019e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da0f      	bge.n	8001a16 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	f003 020f 	and.w	r2, r3, #15
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	3338      	adds	r3, #56	; 0x38
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2201      	movs	r2, #1
 8001a12:	705a      	strb	r2, [r3, #1]
 8001a14:	e00f      	b.n	8001a36 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	f003 020f 	and.w	r2, r3, #15
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a42:	883a      	ldrh	r2, [r7, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	78ba      	ldrb	r2, [r7, #2]
 8001a4c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a60:	78bb      	ldrb	r3, [r7, #2]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d102      	bne.n	8001a6c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_PCD_EP_Open+0xaa>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e00e      	b.n	8001a98 <HAL_PCD_EP_Open+0xc8>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68f9      	ldr	r1, [r7, #12]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fdc1 	bl	8003610 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001a96:	7afb      	ldrb	r3, [r7, #11]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da0f      	bge.n	8001ad4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 020f 	and.w	r2, r3, #15
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	3338      	adds	r3, #56	; 0x38
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3304      	adds	r3, #4
 8001aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	705a      	strb	r2, [r3, #1]
 8001ad2:	e00f      	b.n	8001af4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	f003 020f 	and.w	r2, r3, #15
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	3304      	adds	r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_PCD_EP_Close+0x6e>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e00e      	b.n	8001b2c <HAL_PCD_EP_Close+0x8c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fdff 	bl	8003720 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	460b      	mov	r3, r1
 8001b42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	f003 020f 	and.w	r2, r3, #15
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2200      	movs	r2, #0
 8001b74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b76:	7afb      	ldrb	r3, [r7, #11]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d102      	bne.n	8001b90 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	6979      	ldr	r1, [r7, #20]
 8001ba8:	f002 f8da 	bl	8003d60 <USB_EP0StartXfer>
 8001bac:	e008      	b.n	8001bc0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	6979      	ldr	r1, [r7, #20]
 8001bbc:	f001 fe8c 	bl	80038d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	f003 020f 	and.w	r2, r3, #15
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001bec:	681b      	ldr	r3, [r3, #0]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	460b      	mov	r3, r1
 8001c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	f003 020f 	and.w	r2, r3, #15
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	3338      	adds	r3, #56	; 0x38
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3304      	adds	r3, #4
 8001c20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2201      	movs	r2, #1
 8001c38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d102      	bne.n	8001c54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	6979      	ldr	r1, [r7, #20]
 8001c6c:	f002 f878 	bl	8003d60 <USB_EP0StartXfer>
 8001c70:	e008      	b.n	8001c84 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6979      	ldr	r1, [r7, #20]
 8001c80:	f001 fe2a 	bl	80038d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 020f 	and.w	r2, r3, #15
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d901      	bls.n	8001cac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e050      	b.n	8001d4e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	da0f      	bge.n	8001cd4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	f003 020f 	and.w	r2, r3, #15
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	3338      	adds	r3, #56	; 0x38
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	705a      	strb	r2, [r3, #1]
 8001cd2:	e00d      	b.n	8001cf0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_PCD_EP_SetStall+0x82>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e01e      	b.n	8001d4e <HAL_PCD_EP_SetStall+0xc0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68f9      	ldr	r1, [r7, #12]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 f9cf 	bl	80040c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10a      	bne.n	8001d44 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	b2d9      	uxtb	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f002 fbc0 	bl	80044c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	f003 020f 	and.w	r2, r3, #15
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d901      	bls.n	8001d74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e042      	b.n	8001dfa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da0f      	bge.n	8001d9c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 020f 	and.w	r2, r3, #15
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	3338      	adds	r3, #56	; 0x38
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	4413      	add	r3, r2
 8001d90:	3304      	adds	r3, #4
 8001d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	705a      	strb	r2, [r3, #1]
 8001d9a:	e00f      	b.n	8001dbc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	f003 020f 	and.w	r2, r3, #15
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	3304      	adds	r3, #4
 8001db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_PCD_EP_ClrStall+0x86>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e00e      	b.n	8001dfa <HAL_PCD_EP_ClrStall+0xa4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68f9      	ldr	r1, [r7, #12]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f002 f9d7 	bl	800419e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b08a      	sub	sp, #40	; 0x28
 8001e06:	af02      	add	r7, sp, #8
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	3338      	adds	r3, #56	; 0x38
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	3304      	adds	r3, #4
 8001e28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d901      	bls.n	8001e3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06c      	b.n	8001f14 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d902      	bls.n	8001e56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3303      	adds	r3, #3
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e5e:	e02b      	b.n	8001eb8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d902      	bls.n	8001e7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	3303      	adds	r3, #3
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	68d9      	ldr	r1, [r3, #12]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	4603      	mov	r3, r0
 8001e9a:	6978      	ldr	r0, [r7, #20]
 8001e9c:	f002 f8b3 	bl	8004006 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	441a      	add	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	699a      	ldr	r2, [r3, #24]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	441a      	add	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d809      	bhi.n	8001ee2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d203      	bcs.n	8001ee2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1be      	bne.n	8001e60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d811      	bhi.n	8001f12 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	6939      	ldr	r1, [r7, #16]
 8001f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f0e:	4013      	ands	r3, r2
 8001f10:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	333c      	adds	r3, #60	; 0x3c
 8001f34:	3304      	adds	r3, #4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	f040 80a0 	bne.w	8002094 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4a72      	ldr	r2, [pc, #456]	; (800212c <PCD_EP_OutXfrComplete_int+0x210>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	f240 80dd 	bls.w	8002122 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 80d7 	beq.w	8002122 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f80:	461a      	mov	r2, r3
 8001f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f86:	6093      	str	r3, [r2, #8]
 8001f88:	e0cb      	b.n	8002122 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	6093      	str	r3, [r2, #8]
 8001fa6:	e0bc      	b.n	8002122 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f040 80b7 	bne.w	8002122 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4a5d      	ldr	r2, [pc, #372]	; (800212c <PCD_EP_OutXfrComplete_int+0x210>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d90f      	bls.n	8001fdc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fd8:	6093      	str	r3, [r2, #8]
 8001fda:	e0a2      	b.n	8002122 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fee:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	0159      	lsls	r1, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002002:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4403      	add	r3, r0
 8002012:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002016:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4403      	add	r3, r0
 800203a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4419      	add	r1, r3
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4403      	add	r3, r0
 8002050:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002054:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d114      	bne.n	8002086 <PCD_EP_OutXfrComplete_int+0x16a>
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d108      	bne.n	8002086 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800207e:	461a      	mov	r2, r3
 8002080:	2101      	movs	r1, #1
 8002082:	f002 fa1f 	bl	80044c4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	4619      	mov	r1, r3
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f004 f9a7 	bl	80063e0 <HAL_PCD_DataOutStageCallback>
 8002092:	e046      	b.n	8002122 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4a26      	ldr	r2, [pc, #152]	; (8002130 <PCD_EP_OutXfrComplete_int+0x214>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d124      	bne.n	80020e6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b2:	461a      	mov	r2, r3
 80020b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020b8:	6093      	str	r3, [r2, #8]
 80020ba:	e032      	b.n	8002122 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d008      	beq.n	80020d8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d2:	461a      	mov	r2, r3
 80020d4:	2320      	movs	r3, #32
 80020d6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	4619      	mov	r1, r3
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f004 f97e 	bl	80063e0 <HAL_PCD_DataOutStageCallback>
 80020e4:	e01d      	b.n	8002122 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d114      	bne.n	8002116 <PCD_EP_OutXfrComplete_int+0x1fa>
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d108      	bne.n	8002116 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800210e:	461a      	mov	r2, r3
 8002110:	2100      	movs	r1, #0
 8002112:	f002 f9d7 	bl	80044c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4619      	mov	r1, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f004 f95f 	bl	80063e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	4f54300a 	.word	0x4f54300a
 8002130:	4f54310a 	.word	0x4f54310a

08002134 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	333c      	adds	r3, #60	; 0x3c
 800214c:	3304      	adds	r3, #4
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4a15      	ldr	r2, [pc, #84]	; (80021bc <PCD_EP_OutSetupPacket_int+0x88>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d90e      	bls.n	8002188 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002170:	2b00      	cmp	r3, #0
 8002172:	d009      	beq.n	8002188 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002180:	461a      	mov	r2, r3
 8002182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002186:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f004 f917 	bl	80063bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <PCD_EP_OutSetupPacket_int+0x88>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d90c      	bls.n	80021b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d108      	bne.n	80021b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021a8:	461a      	mov	r2, r3
 80021aa:	2101      	movs	r1, #1
 80021ac:	f002 f98a 	bl	80044c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	4f54300a 	.word	0x4f54300a

080021c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	70fb      	strb	r3, [r7, #3]
 80021cc:	4613      	mov	r3, r2
 80021ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d107      	bne.n	80021ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021de:	883b      	ldrh	r3, [r7, #0]
 80021e0:	0419      	lsls	r1, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
 80021ec:	e028      	b.n	8002240 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	0c1b      	lsrs	r3, r3, #16
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	4413      	add	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
 8002200:	e00d      	b.n	800221e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	3340      	adds	r3, #64	; 0x40
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4413      	add	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	3301      	adds	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	3b01      	subs	r3, #1
 8002224:	429a      	cmp	r2, r3
 8002226:	d3ec      	bcc.n	8002202 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002228:	883b      	ldrh	r3, [r7, #0]
 800222a:	0418      	lsls	r0, r3, #16
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	3b01      	subs	r3, #1
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	4302      	orrs	r2, r0
 8002238:	3340      	adds	r3, #64	; 0x40
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e264      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d075      	beq.n	8002392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022a6:	4ba3      	ldr	r3, [pc, #652]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d00c      	beq.n	80022cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b2:	4ba0      	ldr	r3, [pc, #640]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d112      	bne.n	80022e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022be:	4b9d      	ldr	r3, [pc, #628]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ca:	d10b      	bne.n	80022e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	4b99      	ldr	r3, [pc, #612]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d05b      	beq.n	8002390 <HAL_RCC_OscConfig+0x108>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d157      	bne.n	8002390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e23f      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d106      	bne.n	80022fc <HAL_RCC_OscConfig+0x74>
 80022ee:	4b91      	ldr	r3, [pc, #580]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a90      	ldr	r2, [pc, #576]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0xb0>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x98>
 8002306:	4b8b      	ldr	r3, [pc, #556]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a8a      	ldr	r2, [pc, #552]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b88      	ldr	r3, [pc, #544]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a87      	ldr	r2, [pc, #540]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xb0>
 8002320:	4b84      	ldr	r3, [pc, #528]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a83      	ldr	r2, [pc, #524]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b81      	ldr	r3, [pc, #516]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a80      	ldr	r2, [pc, #512]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe fb40 	bl	80009c4 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe fb3c 	bl	80009c4 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e204      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b76      	ldr	r3, [pc, #472]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0xc0>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe fb2c 	bl	80009c4 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe fb28 	bl	80009c4 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1f0      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	4b6c      	ldr	r3, [pc, #432]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0xe8>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d063      	beq.n	8002466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800239e:	4b65      	ldr	r3, [pc, #404]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023aa:	4b62      	ldr	r3, [pc, #392]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d11c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b6:	4b5f      	ldr	r3, [pc, #380]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d116      	bne.n	80023f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	4b5c      	ldr	r3, [pc, #368]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_RCC_OscConfig+0x152>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e1c4      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b56      	ldr	r3, [pc, #344]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4952      	ldr	r1, [pc, #328]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	e03a      	b.n	8002466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f8:	4b4f      	ldr	r3, [pc, #316]	; (8002538 <HAL_RCC_OscConfig+0x2b0>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7fe fae1 	bl	80009c4 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002406:	f7fe fadd 	bl	80009c4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e1a5      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	4b46      	ldr	r3, [pc, #280]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b43      	ldr	r3, [pc, #268]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4940      	ldr	r1, [pc, #256]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243a:	4b3f      	ldr	r3, [pc, #252]	; (8002538 <HAL_RCC_OscConfig+0x2b0>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fac0 	bl	80009c4 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002448:	f7fe fabc 	bl	80009c4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e184      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d030      	beq.n	80024d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247a:	4b30      	ldr	r3, [pc, #192]	; (800253c <HAL_RCC_OscConfig+0x2b4>)
 800247c:	2201      	movs	r2, #1
 800247e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7fe faa0 	bl	80009c4 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002488:	f7fe fa9c 	bl	80009c4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e164      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	4b26      	ldr	r3, [pc, #152]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x200>
 80024a6:	e015      	b.n	80024d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a8:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_RCC_OscConfig+0x2b4>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ae:	f7fe fa89 	bl	80009c4 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b6:	f7fe fa85 	bl	80009c4 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e14d      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80a0 	beq.w	8002622 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250e:	2301      	movs	r3, #1
 8002510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_OscConfig+0x2b8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d121      	bne.n	8002562 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HAL_RCC_OscConfig+0x2b8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a07      	ldr	r2, [pc, #28]	; (8002540 <HAL_RCC_OscConfig+0x2b8>)
 8002524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252a:	f7fe fa4b 	bl	80009c4 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002530:	e011      	b.n	8002556 <HAL_RCC_OscConfig+0x2ce>
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	42470000 	.word	0x42470000
 800253c:	42470e80 	.word	0x42470e80
 8002540:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002544:	f7fe fa3e 	bl	80009c4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e106      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b85      	ldr	r3, [pc, #532]	; (800276c <HAL_RCC_OscConfig+0x4e4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d106      	bne.n	8002578 <HAL_RCC_OscConfig+0x2f0>
 800256a:	4b81      	ldr	r3, [pc, #516]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a80      	ldr	r2, [pc, #512]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
 8002576:	e01c      	b.n	80025b2 <HAL_RCC_OscConfig+0x32a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d10c      	bne.n	800259a <HAL_RCC_OscConfig+0x312>
 8002580:	4b7b      	ldr	r3, [pc, #492]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	4a7a      	ldr	r2, [pc, #488]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	6713      	str	r3, [r2, #112]	; 0x70
 800258c:	4b78      	ldr	r3, [pc, #480]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a77      	ldr	r2, [pc, #476]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
 8002598:	e00b      	b.n	80025b2 <HAL_RCC_OscConfig+0x32a>
 800259a:	4b75      	ldr	r3, [pc, #468]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259e:	4a74      	ldr	r2, [pc, #464]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70
 80025a6:	4b72      	ldr	r3, [pc, #456]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	4a71      	ldr	r2, [pc, #452]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d015      	beq.n	80025e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ba:	f7fe fa03 	bl	80009c4 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe f9ff 	bl	80009c4 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0c5      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d8:	4b65      	ldr	r3, [pc, #404]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ee      	beq.n	80025c2 <HAL_RCC_OscConfig+0x33a>
 80025e4:	e014      	b.n	8002610 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7fe f9ed 	bl	80009c4 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe f9e9 	bl	80009c4 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0af      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002604:	4b5a      	ldr	r3, [pc, #360]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ee      	bne.n	80025ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002610:	7dfb      	ldrb	r3, [r7, #23]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d105      	bne.n	8002622 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002616:	4b56      	ldr	r3, [pc, #344]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a55      	ldr	r2, [pc, #340]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 800261c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 809b 	beq.w	8002762 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800262c:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b08      	cmp	r3, #8
 8002636:	d05c      	beq.n	80026f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d141      	bne.n	80026c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002640:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_RCC_OscConfig+0x4ec>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe f9bd 	bl	80009c4 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe f9b9 	bl	80009c4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e081      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002660:	4b43      	ldr	r3, [pc, #268]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	019b      	lsls	r3, r3, #6
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	085b      	lsrs	r3, r3, #1
 8002684:	3b01      	subs	r3, #1
 8002686:	041b      	lsls	r3, r3, #16
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	061b      	lsls	r3, r3, #24
 8002690:	4937      	ldr	r1, [pc, #220]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002696:	4b37      	ldr	r3, [pc, #220]	; (8002774 <HAL_RCC_OscConfig+0x4ec>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fe f992 	bl	80009c4 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe f98e 	bl	80009c4 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e056      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x41c>
 80026c2:	e04e      	b.n	8002762 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_RCC_OscConfig+0x4ec>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7fe f97b 	bl	80009c4 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe f977 	bl	80009c4 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e03f      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x44a>
 80026f0:	e037      	b.n	8002762 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e032      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <HAL_RCC_OscConfig+0x4e8>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d028      	beq.n	800275e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d121      	bne.n	800275e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d11a      	bne.n	800275e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002734:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002736:	4293      	cmp	r3, r2
 8002738:	d111      	bne.n	800275e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	085b      	lsrs	r3, r3, #1
 8002746:	3b01      	subs	r3, #1
 8002748:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d107      	bne.n	800275e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40007000 	.word	0x40007000
 8002770:	40023800 	.word	0x40023800
 8002774:	42470060 	.word	0x42470060

08002778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0cc      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b68      	ldr	r3, [pc, #416]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d90c      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0b8      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e4:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b50      	ldr	r3, [pc, #320]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	494d      	ldr	r1, [pc, #308]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d044      	beq.n	8002898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d119      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d003      	beq.n	8002836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002832:	2b03      	cmp	r3, #3
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	4b3f      	ldr	r3, [pc, #252]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e067      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002856:	4b37      	ldr	r3, [pc, #220]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f023 0203 	bic.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4934      	ldr	r1, [pc, #208]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002868:	f7fe f8ac 	bl	80009c4 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	e00a      	b.n	8002886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002870:	f7fe f8a8 	bl	80009c4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e04f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 020c 	and.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	429a      	cmp	r2, r3
 8002896:	d1eb      	bne.n	8002870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002898:	4b25      	ldr	r3, [pc, #148]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d20c      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e032      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4916      	ldr	r1, [pc, #88]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	490e      	ldr	r1, [pc, #56]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028fe:	f000 f821 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002902:	4602      	mov	r2, r0
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	490a      	ldr	r1, [pc, #40]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	5ccb      	ldrb	r3, [r1, r3]
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_ClockConfig+0x1c8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe f80c 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023c00 	.word	0x40023c00
 8002934:	40023800 	.word	0x40023800
 8002938:	080069fc 	.word	0x080069fc
 800293c:	20000004 	.word	0x20000004
 8002940:	20000008 	.word	0x20000008

08002944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	2300      	movs	r3, #0
 8002956:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800295c:	4b67      	ldr	r3, [pc, #412]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b08      	cmp	r3, #8
 8002966:	d00d      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x40>
 8002968:	2b08      	cmp	r3, #8
 800296a:	f200 80bd 	bhi.w	8002ae8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x34>
 8002972:	2b04      	cmp	r3, #4
 8002974:	d003      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0x3a>
 8002976:	e0b7      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b61      	ldr	r3, [pc, #388]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800297a:	60bb      	str	r3, [r7, #8]
       break;
 800297c:	e0b7      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800297e:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002980:	60bb      	str	r3, [r7, #8]
      break;
 8002982:	e0b4      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002984:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800298c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800298e:	4b5b      	ldr	r3, [pc, #364]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d04d      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800299a:	4b58      	ldr	r3, [pc, #352]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	099b      	lsrs	r3, r3, #6
 80029a0:	461a      	mov	r2, r3
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	ea02 0800 	and.w	r8, r2, r0
 80029b2:	ea03 0901 	and.w	r9, r3, r1
 80029b6:	4640      	mov	r0, r8
 80029b8:	4649      	mov	r1, r9
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	014b      	lsls	r3, r1, #5
 80029c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029c8:	0142      	lsls	r2, r0, #5
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	ebb0 0008 	subs.w	r0, r0, r8
 80029d2:	eb61 0109 	sbc.w	r1, r1, r9
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	018b      	lsls	r3, r1, #6
 80029e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029e4:	0182      	lsls	r2, r0, #6
 80029e6:	1a12      	subs	r2, r2, r0
 80029e8:	eb63 0301 	sbc.w	r3, r3, r1
 80029ec:	f04f 0000 	mov.w	r0, #0
 80029f0:	f04f 0100 	mov.w	r1, #0
 80029f4:	00d9      	lsls	r1, r3, #3
 80029f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029fa:	00d0      	lsls	r0, r2, #3
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	eb12 0208 	adds.w	r2, r2, r8
 8002a04:	eb43 0309 	adc.w	r3, r3, r9
 8002a08:	f04f 0000 	mov.w	r0, #0
 8002a0c:	f04f 0100 	mov.w	r1, #0
 8002a10:	0259      	lsls	r1, r3, #9
 8002a12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a16:	0250      	lsls	r0, r2, #9
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	f7fd fbdc 	bl	80001e4 <__aeabi_uldivmod>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4613      	mov	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e04a      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a36:	4b31      	ldr	r3, [pc, #196]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	099b      	lsrs	r3, r3, #6
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	ea02 0400 	and.w	r4, r2, r0
 8002a4e:	ea03 0501 	and.w	r5, r3, r1
 8002a52:	4620      	mov	r0, r4
 8002a54:	4629      	mov	r1, r5
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	014b      	lsls	r3, r1, #5
 8002a60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a64:	0142      	lsls	r2, r0, #5
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	1b00      	subs	r0, r0, r4
 8002a6c:	eb61 0105 	sbc.w	r1, r1, r5
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	018b      	lsls	r3, r1, #6
 8002a7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a7e:	0182      	lsls	r2, r0, #6
 8002a80:	1a12      	subs	r2, r2, r0
 8002a82:	eb63 0301 	sbc.w	r3, r3, r1
 8002a86:	f04f 0000 	mov.w	r0, #0
 8002a8a:	f04f 0100 	mov.w	r1, #0
 8002a8e:	00d9      	lsls	r1, r3, #3
 8002a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a94:	00d0      	lsls	r0, r2, #3
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	1912      	adds	r2, r2, r4
 8002a9c:	eb45 0303 	adc.w	r3, r5, r3
 8002aa0:	f04f 0000 	mov.w	r0, #0
 8002aa4:	f04f 0100 	mov.w	r1, #0
 8002aa8:	0299      	lsls	r1, r3, #10
 8002aaa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aae:	0290      	lsls	r0, r2, #10
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	f7fd fb90 	bl	80001e4 <__aeabi_uldivmod>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4613      	mov	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	0c1b      	lsrs	r3, r3, #16
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae4:	60bb      	str	r3, [r7, #8]
      break;
 8002ae6:	e002      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002aea:	60bb      	str	r3, [r7, #8]
      break;
 8002aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aee:	68bb      	ldr	r3, [r7, #8]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	00f42400 	.word	0x00f42400
 8002b04:	007a1200 	.word	0x007a1200

08002b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000004 	.word	0x20000004

08002b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b24:	f7ff fff0 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	0a9b      	lsrs	r3, r3, #10
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	4903      	ldr	r1, [pc, #12]	; (8002b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b36:	5ccb      	ldrb	r3, [r1, r3]
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40023800 	.word	0x40023800
 8002b44:	08006a0c 	.word	0x08006a0c

08002b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b4c:	f7ff ffdc 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	0b5b      	lsrs	r3, r3, #13
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	4903      	ldr	r1, [pc, #12]	; (8002b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	08006a0c 	.word	0x08006a0c

08002b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e03f      	b.n	8002c02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fd fdf6 	bl	8000788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2224      	movs	r2, #36	; 0x24
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f829 	bl	8002c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c10:	b09f      	sub	sp, #124	; 0x7c
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c22:	68d9      	ldr	r1, [r3, #12]
 8002c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	ea40 0301 	orr.w	r3, r0, r1
 8002c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c50:	f021 010c 	bic.w	r1, r1, #12
 8002c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6a:	6999      	ldr	r1, [r3, #24]
 8002c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	ea40 0301 	orr.w	r3, r0, r1
 8002c74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4bc5      	ldr	r3, [pc, #788]	; (8002f90 <UART_SetConfig+0x384>)
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d004      	beq.n	8002c8a <UART_SetConfig+0x7e>
 8002c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4bc3      	ldr	r3, [pc, #780]	; (8002f94 <UART_SetConfig+0x388>)
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d103      	bne.n	8002c92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c8a:	f7ff ff5d 	bl	8002b48 <HAL_RCC_GetPCLK2Freq>
 8002c8e:	6778      	str	r0, [r7, #116]	; 0x74
 8002c90:	e002      	b.n	8002c98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c92:	f7ff ff45 	bl	8002b20 <HAL_RCC_GetPCLK1Freq>
 8002c96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca0:	f040 80b6 	bne.w	8002e10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca6:	461c      	mov	r4, r3
 8002ca8:	f04f 0500 	mov.w	r5, #0
 8002cac:	4622      	mov	r2, r4
 8002cae:	462b      	mov	r3, r5
 8002cb0:	1891      	adds	r1, r2, r2
 8002cb2:	6439      	str	r1, [r7, #64]	; 0x40
 8002cb4:	415b      	adcs	r3, r3
 8002cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cbc:	1912      	adds	r2, r2, r4
 8002cbe:	eb45 0303 	adc.w	r3, r5, r3
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	00d9      	lsls	r1, r3, #3
 8002ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cd0:	00d0      	lsls	r0, r2, #3
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	1911      	adds	r1, r2, r4
 8002cd8:	6639      	str	r1, [r7, #96]	; 0x60
 8002cda:	416b      	adcs	r3, r5
 8002cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8002cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	1891      	adds	r1, r2, r2
 8002cea:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cec:	415b      	adcs	r3, r3
 8002cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cf4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002cf8:	f7fd fa74 	bl	80001e4 <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4ba5      	ldr	r3, [pc, #660]	; (8002f98 <UART_SetConfig+0x38c>)
 8002d02:	fba3 2302 	umull	r2, r3, r3, r2
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	011e      	lsls	r6, r3, #4
 8002d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0c:	461c      	mov	r4, r3
 8002d0e:	f04f 0500 	mov.w	r5, #0
 8002d12:	4622      	mov	r2, r4
 8002d14:	462b      	mov	r3, r5
 8002d16:	1891      	adds	r1, r2, r2
 8002d18:	6339      	str	r1, [r7, #48]	; 0x30
 8002d1a:	415b      	adcs	r3, r3
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d22:	1912      	adds	r2, r2, r4
 8002d24:	eb45 0303 	adc.w	r3, r5, r3
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	00d9      	lsls	r1, r3, #3
 8002d32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d36:	00d0      	lsls	r0, r2, #3
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	1911      	adds	r1, r2, r4
 8002d3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d40:	416b      	adcs	r3, r5
 8002d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	1891      	adds	r1, r2, r2
 8002d50:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d52:	415b      	adcs	r3, r3
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d5e:	f7fd fa41 	bl	80001e4 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4b8c      	ldr	r3, [pc, #560]	; (8002f98 <UART_SetConfig+0x38c>)
 8002d68:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	2164      	movs	r1, #100	; 0x64
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	3332      	adds	r3, #50	; 0x32
 8002d7a:	4a87      	ldr	r2, [pc, #540]	; (8002f98 <UART_SetConfig+0x38c>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d88:	441e      	add	r6, r3
 8002d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	1894      	adds	r4, r2, r2
 8002d98:	623c      	str	r4, [r7, #32]
 8002d9a:	415b      	adcs	r3, r3
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002da2:	1812      	adds	r2, r2, r0
 8002da4:	eb41 0303 	adc.w	r3, r1, r3
 8002da8:	f04f 0400 	mov.w	r4, #0
 8002dac:	f04f 0500 	mov.w	r5, #0
 8002db0:	00dd      	lsls	r5, r3, #3
 8002db2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002db6:	00d4      	lsls	r4, r2, #3
 8002db8:	4622      	mov	r2, r4
 8002dba:	462b      	mov	r3, r5
 8002dbc:	1814      	adds	r4, r2, r0
 8002dbe:	653c      	str	r4, [r7, #80]	; 0x50
 8002dc0:	414b      	adcs	r3, r1
 8002dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8002dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	1891      	adds	r1, r2, r2
 8002dd0:	61b9      	str	r1, [r7, #24]
 8002dd2:	415b      	adcs	r3, r3
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002dde:	f7fd fa01 	bl	80001e4 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4b6c      	ldr	r3, [pc, #432]	; (8002f98 <UART_SetConfig+0x38c>)
 8002de8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	2164      	movs	r1, #100	; 0x64
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	3332      	adds	r3, #50	; 0x32
 8002dfa:	4a67      	ldr	r2, [pc, #412]	; (8002f98 <UART_SetConfig+0x38c>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	f003 0207 	and.w	r2, r3, #7
 8002e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4432      	add	r2, r6
 8002e0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e0e:	e0b9      	b.n	8002f84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e12:	461c      	mov	r4, r3
 8002e14:	f04f 0500 	mov.w	r5, #0
 8002e18:	4622      	mov	r2, r4
 8002e1a:	462b      	mov	r3, r5
 8002e1c:	1891      	adds	r1, r2, r2
 8002e1e:	6139      	str	r1, [r7, #16]
 8002e20:	415b      	adcs	r3, r3
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e28:	1912      	adds	r2, r2, r4
 8002e2a:	eb45 0303 	adc.w	r3, r5, r3
 8002e2e:	f04f 0000 	mov.w	r0, #0
 8002e32:	f04f 0100 	mov.w	r1, #0
 8002e36:	00d9      	lsls	r1, r3, #3
 8002e38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e3c:	00d0      	lsls	r0, r2, #3
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	eb12 0804 	adds.w	r8, r2, r4
 8002e46:	eb43 0905 	adc.w	r9, r3, r5
 8002e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f04f 0100 	mov.w	r1, #0
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	008b      	lsls	r3, r1, #2
 8002e5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e62:	0082      	lsls	r2, r0, #2
 8002e64:	4640      	mov	r0, r8
 8002e66:	4649      	mov	r1, r9
 8002e68:	f7fd f9bc 	bl	80001e4 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4b49      	ldr	r3, [pc, #292]	; (8002f98 <UART_SetConfig+0x38c>)
 8002e72:	fba3 2302 	umull	r2, r3, r3, r2
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	011e      	lsls	r6, r3, #4
 8002e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f04f 0100 	mov.w	r1, #0
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	1894      	adds	r4, r2, r2
 8002e88:	60bc      	str	r4, [r7, #8]
 8002e8a:	415b      	adcs	r3, r3
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e92:	1812      	adds	r2, r2, r0
 8002e94:	eb41 0303 	adc.w	r3, r1, r3
 8002e98:	f04f 0400 	mov.w	r4, #0
 8002e9c:	f04f 0500 	mov.w	r5, #0
 8002ea0:	00dd      	lsls	r5, r3, #3
 8002ea2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ea6:	00d4      	lsls	r4, r2, #3
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	462b      	mov	r3, r5
 8002eac:	1814      	adds	r4, r2, r0
 8002eae:	64bc      	str	r4, [r7, #72]	; 0x48
 8002eb0:	414b      	adcs	r3, r1
 8002eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	008b      	lsls	r3, r1, #2
 8002ec8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ecc:	0082      	lsls	r2, r0, #2
 8002ece:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ed2:	f7fd f987 	bl	80001e4 <__aeabi_uldivmod>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <UART_SetConfig+0x38c>)
 8002edc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	2164      	movs	r1, #100	; 0x64
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	3332      	adds	r3, #50	; 0x32
 8002eee:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <UART_SetConfig+0x38c>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002efa:	441e      	add	r6, r3
 8002efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002efe:	4618      	mov	r0, r3
 8002f00:	f04f 0100 	mov.w	r1, #0
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	1894      	adds	r4, r2, r2
 8002f0a:	603c      	str	r4, [r7, #0]
 8002f0c:	415b      	adcs	r3, r3
 8002f0e:	607b      	str	r3, [r7, #4]
 8002f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f14:	1812      	adds	r2, r2, r0
 8002f16:	eb41 0303 	adc.w	r3, r1, r3
 8002f1a:	f04f 0400 	mov.w	r4, #0
 8002f1e:	f04f 0500 	mov.w	r5, #0
 8002f22:	00dd      	lsls	r5, r3, #3
 8002f24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f28:	00d4      	lsls	r4, r2, #3
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	462b      	mov	r3, r5
 8002f2e:	eb12 0a00 	adds.w	sl, r2, r0
 8002f32:	eb43 0b01 	adc.w	fp, r3, r1
 8002f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f04f 0100 	mov.w	r1, #0
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	008b      	lsls	r3, r1, #2
 8002f4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f4e:	0082      	lsls	r2, r0, #2
 8002f50:	4650      	mov	r0, sl
 8002f52:	4659      	mov	r1, fp
 8002f54:	f7fd f946 	bl	80001e4 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <UART_SetConfig+0x38c>)
 8002f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2164      	movs	r1, #100	; 0x64
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	3332      	adds	r3, #50	; 0x32
 8002f70:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <UART_SetConfig+0x38c>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	f003 020f 	and.w	r2, r3, #15
 8002f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4432      	add	r2, r6
 8002f82:	609a      	str	r2, [r3, #8]
}
 8002f84:	bf00      	nop
 8002f86:	377c      	adds	r7, #124	; 0x7c
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f8e:	bf00      	nop
 8002f90:	40011000 	.word	0x40011000
 8002f94:	40011400 	.word	0x40011400
 8002f98:	51eb851f 	.word	0x51eb851f

08002f9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	f107 001c 	add.w	r0, r7, #28
 8002faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d122      	bne.n	8002ffa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d105      	bne.n	8002fee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f001 fac6 	bl	8004580 <USB_CoreReset>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]
 8002ff8:	e01a      	b.n	8003030 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f001 faba 	bl	8004580 <USB_CoreReset>
 800300c:	4603      	mov	r3, r0
 800300e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	639a      	str	r2, [r3, #56]	; 0x38
 8003022:	e005      	b.n	8003030 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10b      	bne.n	800304e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f043 0206 	orr.w	r2, r3, #6
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f043 0220 	orr.w	r2, r3, #32
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800305a:	b004      	add	sp, #16
 800305c:	4770      	bx	lr
	...

08003060 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	4613      	mov	r3, r2
 800306c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d165      	bne.n	8003140 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4a41      	ldr	r2, [pc, #260]	; (800317c <USB_SetTurnaroundTime+0x11c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d906      	bls.n	800308a <USB_SetTurnaroundTime+0x2a>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4a40      	ldr	r2, [pc, #256]	; (8003180 <USB_SetTurnaroundTime+0x120>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d202      	bcs.n	800308a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003084:	230f      	movs	r3, #15
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	e062      	b.n	8003150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4a3c      	ldr	r2, [pc, #240]	; (8003180 <USB_SetTurnaroundTime+0x120>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d306      	bcc.n	80030a0 <USB_SetTurnaroundTime+0x40>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4a3b      	ldr	r2, [pc, #236]	; (8003184 <USB_SetTurnaroundTime+0x124>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d202      	bcs.n	80030a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800309a:	230e      	movs	r3, #14
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	e057      	b.n	8003150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4a38      	ldr	r2, [pc, #224]	; (8003184 <USB_SetTurnaroundTime+0x124>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d306      	bcc.n	80030b6 <USB_SetTurnaroundTime+0x56>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4a37      	ldr	r2, [pc, #220]	; (8003188 <USB_SetTurnaroundTime+0x128>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d202      	bcs.n	80030b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80030b0:	230d      	movs	r3, #13
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	e04c      	b.n	8003150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4a33      	ldr	r2, [pc, #204]	; (8003188 <USB_SetTurnaroundTime+0x128>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d306      	bcc.n	80030cc <USB_SetTurnaroundTime+0x6c>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4a32      	ldr	r2, [pc, #200]	; (800318c <USB_SetTurnaroundTime+0x12c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d802      	bhi.n	80030cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80030c6:	230c      	movs	r3, #12
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	e041      	b.n	8003150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4a2f      	ldr	r2, [pc, #188]	; (800318c <USB_SetTurnaroundTime+0x12c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d906      	bls.n	80030e2 <USB_SetTurnaroundTime+0x82>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4a2e      	ldr	r2, [pc, #184]	; (8003190 <USB_SetTurnaroundTime+0x130>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d802      	bhi.n	80030e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80030dc:	230b      	movs	r3, #11
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e036      	b.n	8003150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <USB_SetTurnaroundTime+0x130>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d906      	bls.n	80030f8 <USB_SetTurnaroundTime+0x98>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4a29      	ldr	r2, [pc, #164]	; (8003194 <USB_SetTurnaroundTime+0x134>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d802      	bhi.n	80030f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80030f2:	230a      	movs	r3, #10
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e02b      	b.n	8003150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4a26      	ldr	r2, [pc, #152]	; (8003194 <USB_SetTurnaroundTime+0x134>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d906      	bls.n	800310e <USB_SetTurnaroundTime+0xae>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4a25      	ldr	r2, [pc, #148]	; (8003198 <USB_SetTurnaroundTime+0x138>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d202      	bcs.n	800310e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003108:	2309      	movs	r3, #9
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	e020      	b.n	8003150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4a21      	ldr	r2, [pc, #132]	; (8003198 <USB_SetTurnaroundTime+0x138>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d306      	bcc.n	8003124 <USB_SetTurnaroundTime+0xc4>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4a20      	ldr	r2, [pc, #128]	; (800319c <USB_SetTurnaroundTime+0x13c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d802      	bhi.n	8003124 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800311e:	2308      	movs	r3, #8
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e015      	b.n	8003150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4a1d      	ldr	r2, [pc, #116]	; (800319c <USB_SetTurnaroundTime+0x13c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d906      	bls.n	800313a <USB_SetTurnaroundTime+0xda>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <USB_SetTurnaroundTime+0x140>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d202      	bcs.n	800313a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003134:	2307      	movs	r3, #7
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e00a      	b.n	8003150 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800313a:	2306      	movs	r3, #6
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	e007      	b.n	8003150 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d102      	bne.n	800314c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003146:	2309      	movs	r3, #9
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e001      	b.n	8003150 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800314c:	2309      	movs	r3, #9
 800314e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	029b      	lsls	r3, r3, #10
 8003164:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003168:	431a      	orrs	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	00d8acbf 	.word	0x00d8acbf
 8003180:	00e4e1c0 	.word	0x00e4e1c0
 8003184:	00f42400 	.word	0x00f42400
 8003188:	01067380 	.word	0x01067380
 800318c:	011a499f 	.word	0x011a499f
 8003190:	01312cff 	.word	0x01312cff
 8003194:	014ca43f 	.word	0x014ca43f
 8003198:	016e3600 	.word	0x016e3600
 800319c:	01a6ab1f 	.word	0x01a6ab1f
 80031a0:	01e84800 	.word	0x01e84800

080031a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 0201 	bic.w	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d106      	bne.n	8003214 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	e00b      	b.n	800322c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	e001      	b.n	800322c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e003      	b.n	8003234 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800322c:	2032      	movs	r0, #50	; 0x32
 800322e:	f7fd fbd5 	bl	80009dc <HAL_Delay>

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800323c:	b084      	sub	sp, #16
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800324a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	e009      	b.n	8003270 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	3340      	adds	r3, #64	; 0x40
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	3301      	adds	r3, #1
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b0e      	cmp	r3, #14
 8003274:	d9f2      	bls.n	800325c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d11c      	bne.n	80032b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800328a:	f043 0302 	orr.w	r3, r3, #2
 800328e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38
 80032b4:	e00b      	b.n	80032ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80032d4:	461a      	mov	r2, r3
 80032d6:	2300      	movs	r3, #0
 80032d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e0:	4619      	mov	r1, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e8:	461a      	mov	r2, r3
 80032ea:	680b      	ldr	r3, [r1, #0]
 80032ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d10c      	bne.n	800330e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80032fa:	2100      	movs	r1, #0
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f949 	bl	8003594 <USB_SetDevSpeed>
 8003302:	e008      	b.n	8003316 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003304:	2101      	movs	r1, #1
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f944 	bl	8003594 <USB_SetDevSpeed>
 800330c:	e003      	b.n	8003316 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800330e:	2103      	movs	r1, #3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f93f 	bl	8003594 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003316:	2110      	movs	r1, #16
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f8f3 	bl	8003504 <USB_FlushTxFifo>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f911 	bl	8003550 <USB_FlushRxFifo>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333e:	461a      	mov	r2, r3
 8003340:	2300      	movs	r3, #0
 8003342:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334a:	461a      	mov	r2, r3
 800334c:	2300      	movs	r3, #0
 800334e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003356:	461a      	mov	r2, r3
 8003358:	2300      	movs	r3, #0
 800335a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	e043      	b.n	80033ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003378:	d118      	bne.n	80033ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338c:	461a      	mov	r2, r3
 800338e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	e013      	b.n	80033be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a2:	461a      	mov	r2, r3
 80033a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e008      	b.n	80033be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b8:	461a      	mov	r2, r3
 80033ba:	2300      	movs	r3, #0
 80033bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ca:	461a      	mov	r2, r3
 80033cc:	2300      	movs	r3, #0
 80033ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033dc:	461a      	mov	r2, r3
 80033de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	3301      	adds	r3, #1
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d3b7      	bcc.n	8003362 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	e043      	b.n	8003480 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800340a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800340e:	d118      	bne.n	8003442 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003422:	461a      	mov	r2, r3
 8003424:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e013      	b.n	8003454 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003438:	461a      	mov	r2, r3
 800343a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	e008      	b.n	8003454 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344e:	461a      	mov	r2, r3
 8003450:	2300      	movs	r3, #0
 8003452:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003460:	461a      	mov	r2, r3
 8003462:	2300      	movs	r3, #0
 8003464:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003472:	461a      	mov	r2, r3
 8003474:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003478:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	3301      	adds	r3, #1
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	429a      	cmp	r2, r3
 8003486:	d3b7      	bcc.n	80033f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800349a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80034a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f043 0210 	orr.w	r2, r3, #16
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699a      	ldr	r2, [r3, #24]
 80034c0:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <USB_DevInit+0x2c4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80034c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f043 0208 	orr.w	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80034da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d107      	bne.n	80034f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034e8:	f043 0304 	orr.w	r3, r3, #4
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034fc:	b004      	add	sp, #16
 80034fe:	4770      	bx	lr
 8003500:	803c3800 	.word	0x803c3800

08003504 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	019b      	lsls	r3, r3, #6
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3301      	adds	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <USB_FlushTxFifo+0x48>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e006      	b.n	800353e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b20      	cmp	r3, #32
 800353a:	d0f0      	beq.n	800351e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	00030d40 	.word	0x00030d40

08003550 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2210      	movs	r2, #16
 8003560:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3301      	adds	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <USB_FlushRxFifo+0x40>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e006      	b.n	8003582 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b10      	cmp	r3, #16
 800357e:	d0f0      	beq.n	8003562 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	00030d40 	.word	0x00030d40

08003594 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	68f9      	ldr	r1, [r7, #12]
 80035b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035b4:	4313      	orrs	r3, r2
 80035b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b087      	sub	sp, #28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0306 	and.w	r3, r3, #6
 80035de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d102      	bne.n	80035ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
 80035ea:	e00a      	b.n	8003602 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d002      	beq.n	80035f8 <USB_GetDevSpeed+0x32>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b06      	cmp	r3, #6
 80035f6:	d102      	bne.n	80035fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80035f8:	2302      	movs	r3, #2
 80035fa:	75fb      	strb	r3, [r7, #23]
 80035fc:	e001      	b.n	8003602 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80035fe:	230f      	movs	r3, #15
 8003600:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003602:	7dfb      	ldrb	r3, [r7, #23]
}
 8003604:	4618      	mov	r0, r3
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	785b      	ldrb	r3, [r3, #1]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d13a      	bne.n	80036a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	2101      	movs	r1, #1
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	b29b      	uxth	r3, r3
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800364a:	4313      	orrs	r3, r2
 800364c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d155      	bne.n	8003710 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	78db      	ldrb	r3, [r3, #3]
 800367e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003680:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	059b      	lsls	r3, r3, #22
 8003686:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003688:	4313      	orrs	r3, r2
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	0151      	lsls	r1, r2, #5
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	440a      	add	r2, r1
 8003692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	e036      	b.n	8003710 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	2101      	movs	r1, #1
 80036b4:	fa01 f303 	lsl.w	r3, r1, r3
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	68f9      	ldr	r1, [r7, #12]
 80036bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d11a      	bne.n	8003710 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	78db      	ldrb	r3, [r3, #3]
 80036f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80036f6:	430b      	orrs	r3, r1
 80036f8:	4313      	orrs	r3, r2
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	0151      	lsls	r1, r2, #5
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	440a      	add	r2, r1
 8003702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	785b      	ldrb	r3, [r3, #1]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d161      	bne.n	8003800 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800374e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003752:	d11f      	bne.n	8003794 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	0151      	lsls	r1, r2, #5
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	440a      	add	r2, r1
 800376a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800376e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003772:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	0151      	lsls	r1, r2, #5
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	440a      	add	r2, r1
 800378a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800378e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003792:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	2101      	movs	r1, #1
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	68f9      	ldr	r1, [r7, #12]
 80037b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037b4:	4013      	ands	r3, r2
 80037b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	2101      	movs	r1, #1
 80037ca:	fa01 f303 	lsl.w	r3, r1, r3
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	68f9      	ldr	r1, [r7, #12]
 80037d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037d8:	4013      	ands	r3, r2
 80037da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	0159      	lsls	r1, r3, #5
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	440b      	add	r3, r1
 80037f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f6:	4619      	mov	r1, r3
 80037f8:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <USB_DeactivateEndpoint+0x1b0>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]
 80037fe:	e060      	b.n	80038c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003816:	d11f      	bne.n	8003858 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	0151      	lsls	r1, r2, #5
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	440a      	add	r2, r1
 800382e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003832:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003836:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	0151      	lsls	r1, r2, #5
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	440a      	add	r2, r1
 800384e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003852:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003856:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	2101      	movs	r1, #1
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	43db      	mvns	r3, r3
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003878:	4013      	ands	r3, r2
 800387a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	2101      	movs	r1, #1
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	041b      	lsls	r3, r3, #16
 8003894:	43db      	mvns	r3, r3
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800389c:	4013      	ands	r3, r2
 800389e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	0159      	lsls	r1, r3, #5
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	440b      	add	r3, r1
 80038b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ba:	4619      	mov	r1, r3
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <USB_DeactivateEndpoint+0x1b4>)
 80038be:	4013      	ands	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	ec337800 	.word	0xec337800
 80038d4:	eff37800 	.word	0xeff37800

080038d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	4613      	mov	r3, r2
 80038e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	f040 815c 	bne.w	8003bb2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d132      	bne.n	8003968 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	0151      	lsls	r1, r2, #5
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	440a      	add	r2, r1
 8003918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003920:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003924:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	0151      	lsls	r1, r2, #5
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	440a      	add	r2, r1
 800393c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003940:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003944:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	0151      	lsls	r1, r2, #5
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	440a      	add	r2, r1
 800395c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003960:	0cdb      	lsrs	r3, r3, #19
 8003962:	04db      	lsls	r3, r3, #19
 8003964:	6113      	str	r3, [r2, #16]
 8003966:	e074      	b.n	8003a52 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	0151      	lsls	r1, r2, #5
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	440a      	add	r2, r1
 800397e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003982:	0cdb      	lsrs	r3, r3, #19
 8003984:	04db      	lsls	r3, r3, #19
 8003986:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	0151      	lsls	r1, r2, #5
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	440a      	add	r2, r1
 800399e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6959      	ldr	r1, [r3, #20]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	440b      	add	r3, r1
 80039c4:	1e59      	subs	r1, r3, #1
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ce:	04d9      	lsls	r1, r3, #19
 80039d0:	4b9d      	ldr	r3, [pc, #628]	; (8003c48 <USB_EPStartXfer+0x370>)
 80039d2:	400b      	ands	r3, r1
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	0148      	lsls	r0, r1, #5
 80039d8:	69f9      	ldr	r1, [r7, #28]
 80039da:	4401      	add	r1, r0
 80039dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80039e0:	4313      	orrs	r3, r2
 80039e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039fa:	69b9      	ldr	r1, [r7, #24]
 80039fc:	0148      	lsls	r0, r1, #5
 80039fe:	69f9      	ldr	r1, [r7, #28]
 8003a00:	4401      	add	r1, r0
 8003a02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a06:	4313      	orrs	r3, r2
 8003a08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	78db      	ldrb	r3, [r3, #3]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d11f      	bne.n	8003a52 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	0151      	lsls	r1, r2, #5
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	440a      	add	r2, r1
 8003a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003a30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	0151      	lsls	r1, r2, #5
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	440a      	add	r2, r1
 8003a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d14b      	bne.n	8003af0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	78db      	ldrb	r3, [r3, #3]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d128      	bne.n	8003ace <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d110      	bne.n	8003aae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	0151      	lsls	r1, r2, #5
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	440a      	add	r2, r1
 8003aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	e00f      	b.n	8003ace <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	0151      	lsls	r1, r2, #5
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	440a      	add	r2, r1
 8003ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	0151      	lsls	r1, r2, #5
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e12f      	b.n	8003d50 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	0151      	lsls	r1, r2, #5
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	440a      	add	r2, r1
 8003b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b0e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	78db      	ldrb	r3, [r3, #3]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d015      	beq.n	8003b44 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8117 	beq.w	8003d50 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	2101      	movs	r1, #1
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	69f9      	ldr	r1, [r7, #28]
 8003b3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	634b      	str	r3, [r1, #52]	; 0x34
 8003b42:	e105      	b.n	8003d50 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d110      	bne.n	8003b76 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	e00f      	b.n	8003b96 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	0151      	lsls	r1, r2, #5
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	440a      	add	r2, r1
 8003b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	68d9      	ldr	r1, [r3, #12]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	b298      	uxth	r0, r3
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	4603      	mov	r3, r0
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fa2b 	bl	8004006 <USB_WritePacket>
 8003bb0:	e0ce      	b.n	8003d50 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	0151      	lsls	r1, r2, #5
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	440a      	add	r2, r1
 8003bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bcc:	0cdb      	lsrs	r3, r3, #19
 8003bce:	04db      	lsls	r3, r3, #19
 8003bd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	0151      	lsls	r1, r2, #5
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	440a      	add	r2, r1
 8003be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bf4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d126      	bne.n	8003c4c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c14:	69b9      	ldr	r1, [r7, #24]
 8003c16:	0148      	lsls	r0, r1, #5
 8003c18:	69f9      	ldr	r1, [r7, #28]
 8003c1a:	4401      	add	r1, r0
 8003c1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c20:	4313      	orrs	r3, r2
 8003c22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c42:	6113      	str	r3, [r2, #16]
 8003c44:	e036      	b.n	8003cb4 <USB_EPStartXfer+0x3dc>
 8003c46:	bf00      	nop
 8003c48:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4413      	add	r3, r2
 8003c56:	1e5a      	subs	r2, r3, #1
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	8afb      	ldrh	r3, [r7, #22]
 8003c72:	04d9      	lsls	r1, r3, #19
 8003c74:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <USB_EPStartXfer+0x484>)
 8003c76:	400b      	ands	r3, r1
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	0148      	lsls	r0, r1, #5
 8003c7c:	69f9      	ldr	r1, [r7, #28]
 8003c7e:	4401      	add	r1, r0
 8003c80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c84:	4313      	orrs	r3, r2
 8003c86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	8af9      	ldrh	r1, [r7, #22]
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca4:	69b9      	ldr	r1, [r7, #24]
 8003ca6:	0148      	lsls	r0, r1, #5
 8003ca8:	69f9      	ldr	r1, [r7, #28]
 8003caa:	4401      	add	r1, r0
 8003cac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10d      	bne.n	8003cd6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	68d9      	ldr	r1, [r3, #12]
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd2:	460a      	mov	r2, r1
 8003cd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	78db      	ldrb	r3, [r3, #3]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d128      	bne.n	8003d30 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d110      	bne.n	8003d10 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	0151      	lsls	r1, r2, #5
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	440a      	add	r2, r1
 8003d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e00f      	b.n	8003d30 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	0151      	lsls	r1, r2, #5
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	440a      	add	r2, r1
 8003d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	1ff80000 	.word	0x1ff80000

08003d60 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	785b      	ldrb	r3, [r3, #1]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	f040 80cd 	bne.w	8003f1c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d132      	bne.n	8003df0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	0151      	lsls	r1, r2, #5
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	440a      	add	r2, r1
 8003da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003da8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	0151      	lsls	r1, r2, #5
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	440a      	add	r2, r1
 8003dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	0151      	lsls	r1, r2, #5
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	440a      	add	r2, r1
 8003de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de8:	0cdb      	lsrs	r3, r3, #19
 8003dea:	04db      	lsls	r3, r3, #19
 8003dec:	6113      	str	r3, [r2, #16]
 8003dee:	e04e      	b.n	8003e8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	0151      	lsls	r1, r2, #5
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	440a      	add	r2, r1
 8003e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e0a:	0cdb      	lsrs	r3, r3, #19
 8003e0c:	04db      	lsls	r3, r3, #19
 8003e0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	0151      	lsls	r1, r2, #5
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	440a      	add	r2, r1
 8003e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e32:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d903      	bls.n	8003e48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7e:	6939      	ldr	r1, [r7, #16]
 8003e80:	0148      	lsls	r0, r1, #5
 8003e82:	6979      	ldr	r1, [r7, #20]
 8003e84:	4401      	add	r1, r0
 8003e86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d11e      	bne.n	8003ed2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d009      	beq.n	8003eb0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	0151      	lsls	r1, r2, #5
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	440a      	add	r2, r1
 8003ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e092      	b.n	8003ff8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ef0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d07e      	beq.n	8003ff8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f10:	6979      	ldr	r1, [r7, #20]
 8003f12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f16:	4313      	orrs	r3, r2
 8003f18:	634b      	str	r3, [r1, #52]	; 0x34
 8003f1a:	e06d      	b.n	8003ff8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f36:	0cdb      	lsrs	r3, r3, #19
 8003f38:	04db      	lsls	r3, r3, #19
 8003f3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	0151      	lsls	r1, r2, #5
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	440a      	add	r2, r1
 8003f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f5e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	0151      	lsls	r1, r2, #5
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	440a      	add	r2, r1
 8003f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa6:	6939      	ldr	r1, [r7, #16]
 8003fa8:	0148      	lsls	r0, r1, #5
 8003faa:	6979      	ldr	r1, [r7, #20]
 8003fac:	4401      	add	r1, r0
 8003fae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10d      	bne.n	8003fd8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d009      	beq.n	8003fd8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	68d9      	ldr	r1, [r3, #12]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd4:	460a      	mov	r2, r1
 8003fd6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ff6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004006:	b480      	push	{r7}
 8004008:	b089      	sub	sp, #36	; 0x24
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	4611      	mov	r1, r2
 8004012:	461a      	mov	r2, r3
 8004014:	460b      	mov	r3, r1
 8004016:	71fb      	strb	r3, [r7, #7]
 8004018:	4613      	mov	r3, r2
 800401a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004024:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004028:	2b00      	cmp	r3, #0
 800402a:	d11a      	bne.n	8004062 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800402c:	88bb      	ldrh	r3, [r7, #4]
 800402e:	3303      	adds	r3, #3
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004034:	2300      	movs	r3, #0
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	e00f      	b.n	800405a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	031a      	lsls	r2, r3, #12
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	4413      	add	r3, r2
 8004042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004046:	461a      	mov	r2, r3
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3304      	adds	r3, #4
 8004052:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	3301      	adds	r3, #1
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	429a      	cmp	r2, r3
 8004060:	d3eb      	bcc.n	800403a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3724      	adds	r7, #36	; 0x24
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004070:	b480      	push	{r7}
 8004072:	b089      	sub	sp, #36	; 0x24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	3303      	adds	r3, #3
 800408a:	089b      	lsrs	r3, r3, #2
 800408c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	e00b      	b.n	80040ac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	601a      	str	r2, [r3, #0]
    pDest++;
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	3304      	adds	r3, #4
 80040a4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	3301      	adds	r3, #1
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d3ef      	bcc.n	8004094 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80040b4:	69fb      	ldr	r3, [r7, #28]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3724      	adds	r7, #36	; 0x24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b085      	sub	sp, #20
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	785b      	ldrb	r3, [r3, #1]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d12c      	bne.n	8004138 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db12      	blt.n	8004116 <USB_EPSetStall+0x54>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00f      	beq.n	8004116 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	440a      	add	r2, r1
 800410c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004110:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004114:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004130:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e02b      	b.n	8004190 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	db12      	blt.n	8004170 <USB_EPSetStall+0xae>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00f      	beq.n	8004170 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	0151      	lsls	r1, r2, #5
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	440a      	add	r2, r1
 8004166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800416a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800416e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	0151      	lsls	r1, r2, #5
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	440a      	add	r2, r1
 8004186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800418e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	785b      	ldrb	r3, [r3, #1]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d128      	bne.n	800420c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	78db      	ldrb	r3, [r3, #3]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d003      	beq.n	80041ea <USB_EPClearStall+0x4c>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	78db      	ldrb	r3, [r3, #3]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d138      	bne.n	800425c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e027      	b.n	800425c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	0151      	lsls	r1, r2, #5
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	440a      	add	r2, r1
 8004222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800422a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	78db      	ldrb	r3, [r3, #3]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d003      	beq.n	800423c <USB_EPClearStall+0x9e>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	78db      	ldrb	r3, [r3, #3]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d10f      	bne.n	800425c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	440a      	add	r2, r1
 8004252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004288:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800428c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042a4:	4313      	orrs	r3, r2
 80042a6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042d0:	f023 0303 	bic.w	r3, r3, #3
 80042d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e4:	f023 0302 	bic.w	r3, r3, #2
 80042e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004326:	f043 0302 	orr.w	r3, r3, #2
 800432a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4013      	ands	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004352:	68fb      	ldr	r3, [r7, #12]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4013      	ands	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	0c1b      	lsrs	r3, r3, #16
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	4013      	ands	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	b29b      	uxth	r3, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	4013      	ands	r3, r2
 80043f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043f6:	68bb      	ldr	r3, [r7, #8]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	01db      	lsls	r3, r3, #7
 8004436:	b2db      	uxtb	r3, r3
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004452:	68bb      	ldr	r3, [r7, #8]
}
 8004454:	4618      	mov	r0, r3
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f003 0301 	and.w	r3, r3, #1
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004496:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800449a:	f023 0307 	bic.w	r3, r3, #7
 800449e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	460b      	mov	r3, r1
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	333c      	adds	r3, #60	; 0x3c
 80044da:	3304      	adds	r3, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4a26      	ldr	r2, [pc, #152]	; (800457c <USB_EP0_OutStart+0xb8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d90a      	bls.n	80044fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044f8:	d101      	bne.n	80044fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e037      	b.n	800456e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800451c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800452c:	f043 0318 	orr.w	r3, r3, #24
 8004530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004540:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004544:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004546:	7afb      	ldrb	r3, [r7, #11]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d10f      	bne.n	800456c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004552:	461a      	mov	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004566:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800456a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	4f54300a 	.word	0x4f54300a

08004580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <USB_CoreReset+0x64>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e01b      	b.n	80045d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	daf2      	bge.n	800458c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3301      	adds	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <USB_CoreReset+0x64>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e006      	b.n	80045d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d0f0      	beq.n	80045b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	00030d40 	.word	0x00030d40

080045e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80045f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80045f8:	f002 f95c 	bl	80068b4 <USBD_static_malloc>
 80045fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800460c:	2302      	movs	r3, #2
 800460e:	e066      	b.n	80046de <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	7c1b      	ldrb	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d119      	bne.n	8004654 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004624:	2202      	movs	r2, #2
 8004626:	2181      	movs	r1, #129	; 0x81
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f002 f820 	bl	800666e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004638:	2202      	movs	r2, #2
 800463a:	2101      	movs	r1, #1
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f002 f816 	bl	800666e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2210      	movs	r2, #16
 800464e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004652:	e016      	b.n	8004682 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004654:	2340      	movs	r3, #64	; 0x40
 8004656:	2202      	movs	r2, #2
 8004658:	2181      	movs	r1, #129	; 0x81
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f002 f807 	bl	800666e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004666:	2340      	movs	r3, #64	; 0x40
 8004668:	2202      	movs	r2, #2
 800466a:	2101      	movs	r1, #1
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f001 fffe 	bl	800666e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2210      	movs	r2, #16
 800467e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004682:	2308      	movs	r3, #8
 8004684:	2203      	movs	r2, #3
 8004686:	2182      	movs	r1, #130	; 0x82
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f001 fff0 	bl	800666e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	7c1b      	ldrb	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046c2:	2101      	movs	r1, #1
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f002 f8c1 	bl	800684c <USBD_LL_PrepareReceive>
 80046ca:	e007      	b.n	80046dc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046d2:	2340      	movs	r3, #64	; 0x40
 80046d4:	2101      	movs	r1, #1
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f002 f8b8 	bl	800684c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	460b      	mov	r3, r1
 80046f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80046f2:	2181      	movs	r1, #129	; 0x81
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f001 ffe0 	bl	80066ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004700:	2101      	movs	r1, #1
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f001 ffd9 	bl	80066ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004710:	2182      	movs	r1, #130	; 0x82
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 ffd1 	bl	80066ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00e      	beq.n	8004750 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004742:	4618      	mov	r0, r3
 8004744:	f002 f8c4 	bl	80068d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800476c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004780:	2303      	movs	r3, #3
 8004782:	e0af      	b.n	80048e4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800478c:	2b00      	cmp	r3, #0
 800478e:	d03f      	beq.n	8004810 <USBD_CDC_Setup+0xb4>
 8004790:	2b20      	cmp	r3, #32
 8004792:	f040 809f 	bne.w	80048d4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	88db      	ldrh	r3, [r3, #6]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d02e      	beq.n	80047fc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	b25b      	sxtb	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	da16      	bge.n	80047d6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80047b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	88d2      	ldrh	r2, [r2, #6]
 80047ba:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	88db      	ldrh	r3, [r3, #6]
 80047c0:	2b07      	cmp	r3, #7
 80047c2:	bf28      	it	cs
 80047c4:	2307      	movcs	r3, #7
 80047c6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	89fa      	ldrh	r2, [r7, #14]
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f001 fb19 	bl	8005e06 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80047d4:	e085      	b.n	80048e2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	785a      	ldrb	r2, [r3, #1]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	88db      	ldrh	r3, [r3, #6]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80047ec:	6939      	ldr	r1, [r7, #16]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	88db      	ldrh	r3, [r3, #6]
 80047f2:	461a      	mov	r2, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f001 fb32 	bl	8005e5e <USBD_CtlPrepareRx>
      break;
 80047fa:	e072      	b.n	80048e2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	7850      	ldrb	r0, [r2, #1]
 8004808:	2200      	movs	r2, #0
 800480a:	6839      	ldr	r1, [r7, #0]
 800480c:	4798      	blx	r3
      break;
 800480e:	e068      	b.n	80048e2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	785b      	ldrb	r3, [r3, #1]
 8004814:	2b0b      	cmp	r3, #11
 8004816:	d852      	bhi.n	80048be <USBD_CDC_Setup+0x162>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <USBD_CDC_Setup+0xc4>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004851 	.word	0x08004851
 8004824:	080048cd 	.word	0x080048cd
 8004828:	080048bf 	.word	0x080048bf
 800482c:	080048bf 	.word	0x080048bf
 8004830:	080048bf 	.word	0x080048bf
 8004834:	080048bf 	.word	0x080048bf
 8004838:	080048bf 	.word	0x080048bf
 800483c:	080048bf 	.word	0x080048bf
 8004840:	080048bf 	.word	0x080048bf
 8004844:	080048bf 	.word	0x080048bf
 8004848:	0800487b 	.word	0x0800487b
 800484c:	080048a5 	.word	0x080048a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b03      	cmp	r3, #3
 800485a:	d107      	bne.n	800486c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800485c:	f107 030a 	add.w	r3, r7, #10
 8004860:	2202      	movs	r2, #2
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f001 face 	bl	8005e06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800486a:	e032      	b.n	80048d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800486c:	6839      	ldr	r1, [r7, #0]
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f001 fa58 	bl	8005d24 <USBD_CtlError>
            ret = USBD_FAIL;
 8004874:	2303      	movs	r3, #3
 8004876:	75fb      	strb	r3, [r7, #23]
          break;
 8004878:	e02b      	b.n	80048d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b03      	cmp	r3, #3
 8004884:	d107      	bne.n	8004896 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004886:	f107 030d 	add.w	r3, r7, #13
 800488a:	2201      	movs	r2, #1
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f001 fab9 	bl	8005e06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004894:	e01d      	b.n	80048d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004896:	6839      	ldr	r1, [r7, #0]
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f001 fa43 	bl	8005d24 <USBD_CtlError>
            ret = USBD_FAIL;
 800489e:	2303      	movs	r3, #3
 80048a0:	75fb      	strb	r3, [r7, #23]
          break;
 80048a2:	e016      	b.n	80048d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d00f      	beq.n	80048d0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80048b0:	6839      	ldr	r1, [r7, #0]
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f001 fa36 	bl	8005d24 <USBD_CtlError>
            ret = USBD_FAIL;
 80048b8:	2303      	movs	r3, #3
 80048ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80048bc:	e008      	b.n	80048d0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80048be:	6839      	ldr	r1, [r7, #0]
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f001 fa2f 	bl	8005d24 <USBD_CtlError>
          ret = USBD_FAIL;
 80048c6:	2303      	movs	r3, #3
 80048c8:	75fb      	strb	r3, [r7, #23]
          break;
 80048ca:	e002      	b.n	80048d2 <USBD_CDC_Setup+0x176>
          break;
 80048cc:	bf00      	nop
 80048ce:	e008      	b.n	80048e2 <USBD_CDC_Setup+0x186>
          break;
 80048d0:	bf00      	nop
      }
      break;
 80048d2:	e006      	b.n	80048e2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80048d4:	6839      	ldr	r1, [r7, #0]
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f001 fa24 	bl	8005d24 <USBD_CtlError>
      ret = USBD_FAIL;
 80048dc:	2303      	movs	r3, #3
 80048de:	75fb      	strb	r3, [r7, #23]
      break;
 80048e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80048fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800490a:	2303      	movs	r3, #3
 800490c:	e04f      	b.n	80049ae <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004914:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	3318      	adds	r3, #24
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d029      	beq.n	8004980 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800492c:	78fa      	ldrb	r2, [r7, #3]
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	3318      	adds	r3, #24
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	78f9      	ldrb	r1, [r7, #3]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	460b      	mov	r3, r1
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	1a5b      	subs	r3, r3, r1
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4403      	add	r3, r0
 800494c:	3344      	adds	r3, #68	; 0x44
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	fbb2 f1f3 	udiv	r1, r2, r3
 8004954:	fb03 f301 	mul.w	r3, r3, r1
 8004958:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800495a:	2b00      	cmp	r3, #0
 800495c:	d110      	bne.n	8004980 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800495e:	78fa      	ldrb	r2, [r7, #3]
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	3318      	adds	r3, #24
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004972:	78f9      	ldrb	r1, [r7, #3]
 8004974:	2300      	movs	r3, #0
 8004976:	2200      	movs	r2, #0
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 ff46 	bl	800680a <USBD_LL_Transmit>
 800497e:	e015      	b.n	80049ac <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2200      	movs	r2, #0
 8004984:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80049a8:	78fa      	ldrb	r2, [r7, #3]
 80049aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e015      	b.n	8004a04 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	4619      	mov	r1, r3
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f001 ff56 	bl	800688e <USBD_LL_GetRxDataSize>
 80049e2:	4602      	mov	r2, r0
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80049fe:	4611      	mov	r1, r2
 8004a00:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a1a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e01b      	b.n	8004a5e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d015      	beq.n	8004a5c <USBD_CDC_EP0_RxReady+0x50>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004a36:	2bff      	cmp	r3, #255	; 0xff
 8004a38:	d010      	beq.n	8004a5c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004a48:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004a50:	b292      	uxth	r2, r2
 8004a52:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	22ff      	movs	r2, #255	; 0xff
 8004a58:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2243      	movs	r2, #67	; 0x43
 8004a74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004a76:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	20000098 	.word	0x20000098

08004a88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2243      	movs	r2, #67	; 0x43
 8004a94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004a96:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	20000054 	.word	0x20000054

08004aa8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2243      	movs	r2, #67	; 0x43
 8004ab4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004ab6:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	200000dc 	.word	0x200000dc

08004ac8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	220a      	movs	r2, #10
 8004ad4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004ad6:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	20000010 	.word	0x20000010

08004ae8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e004      	b.n	8004b06 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b087      	sub	sp, #28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b24:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e008      	b.n	8004b42 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e004      	b.n	8004b74 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b8e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e01a      	b.n	8004bd8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d114      	bne.n	8004bd6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004bca:	2181      	movs	r1, #129	; 0x81
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f001 fe1c 	bl	800680a <USBD_LL_Transmit>

    ret = USBD_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e016      	b.n	8004c2c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	7c1b      	ldrb	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c10:	2101      	movs	r1, #1
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f001 fe1a 	bl	800684c <USBD_LL_PrepareReceive>
 8004c18:	e007      	b.n	8004c2a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c20:	2340      	movs	r3, #64	; 0x40
 8004c22:	2101      	movs	r1, #1
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f001 fe11 	bl	800684c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e01f      	b.n	8004c8c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	79fa      	ldrb	r2, [r7, #7]
 8004c7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f001 fc8d 	bl	80065a0 <USBD_LL_Init>
 8004c86:	4603      	mov	r3, r0
 8004c88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e016      	b.n	8004cda <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	f107 020e 	add.w	r2, r7, #14
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4798      	blx	r3
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f001 fca4 	bl	8006638 <USBD_LL_Start>
 8004cf0:	4603      	mov	r3, r0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	4611      	mov	r1, r2
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	4798      	blx	r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	78fa      	ldrb	r2, [r7, #3]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4798      	blx	r3
  }

  return USBD_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d88:	6839      	ldr	r1, [r7, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 ff90 	bl	8005cb0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d01a      	beq.n	8004dea <USBD_LL_SetupStage+0x72>
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d822      	bhi.n	8004dfe <USBD_LL_SetupStage+0x86>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <USBD_LL_SetupStage+0x4a>
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d00a      	beq.n	8004dd6 <USBD_LL_SetupStage+0x5e>
 8004dc0:	e01d      	b.n	8004dfe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004dc8:	4619      	mov	r1, r3
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fa62 	bl	8005294 <USBD_StdDevReq>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd4:	e020      	b.n	8004e18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fac6 	bl	8005370 <USBD_StdItfReq>
 8004de4:	4603      	mov	r3, r0
 8004de6:	73fb      	strb	r3, [r7, #15]
      break;
 8004de8:	e016      	b.n	8004e18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fb05 	bl	8005402 <USBD_StdEPReq>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dfc:	e00c      	b.n	8004e18 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f001 fc73 	bl	80066f8 <USBD_LL_StallEP>
 8004e12:	4603      	mov	r3, r0
 8004e14:	73fb      	strb	r3, [r7, #15]
      break;
 8004e16:	bf00      	nop
  }

  return ret;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b086      	sub	sp, #24
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004e30:	7afb      	ldrb	r3, [r7, #11]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d138      	bne.n	8004ea8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004e3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d14a      	bne.n	8004ede <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d913      	bls.n	8004e7c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	1ad2      	subs	r2, r2, r3
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	bf28      	it	cs
 8004e6e:	4613      	movcs	r3, r2
 8004e70:	461a      	mov	r2, r3
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f001 f80f 	bl	8005e98 <USBD_CtlContinueRx>
 8004e7a:	e030      	b.n	8004ede <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d10b      	bne.n	8004ea0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f001 f80a 	bl	8005eba <USBD_CtlSendStatus>
 8004ea6:	e01a      	b.n	8004ede <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d114      	bne.n	8004ede <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00e      	beq.n	8004ede <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	7afa      	ldrb	r2, [r7, #11]
 8004eca:	4611      	mov	r1, r2
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	4798      	blx	r3
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
 8004edc:	e000      	b.n	8004ee0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004ef6:	7afb      	ldrb	r3, [r7, #11]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d16b      	bne.n	8004fd4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3314      	adds	r3, #20
 8004f00:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d156      	bne.n	8004fba <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d914      	bls.n	8004f42 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	1ad2      	subs	r2, r2, r3
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 ff84 	bl	8005e3c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f34:	2300      	movs	r3, #0
 8004f36:	2200      	movs	r2, #0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f001 fc86 	bl	800684c <USBD_LL_PrepareReceive>
 8004f40:	e03b      	b.n	8004fba <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d11c      	bne.n	8004f88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d316      	bcc.n	8004f88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d20f      	bcs.n	8004f88 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 ff65 	bl	8005e3c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2100      	movs	r1, #0
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f001 fc63 	bl	800684c <USBD_LL_PrepareReceive>
 8004f86:	e018      	b.n	8004fba <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d10b      	bne.n	8004fac <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004fac:	2180      	movs	r1, #128	; 0x80
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f001 fba2 	bl	80066f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 ff93 	bl	8005ee0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d122      	bne.n	800500a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff fe98 	bl	8004cfa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004fd2:	e01a      	b.n	800500a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d114      	bne.n	800500a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00e      	beq.n	800500a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	7afa      	ldrb	r2, [r7, #11]
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	4798      	blx	r3
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005000:	7dfb      	ldrb	r3, [r7, #23]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005006:	7dfb      	ldrb	r3, [r7, #23]
 8005008:	e000      	b.n	800500c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005044:	2303      	movs	r3, #3
 8005046:	e02f      	b.n	80050a8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00f      	beq.n	8005072 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6852      	ldr	r2, [r2, #4]
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	4611      	mov	r1, r2
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005072:	2340      	movs	r3, #64	; 0x40
 8005074:	2200      	movs	r2, #0
 8005076:	2100      	movs	r1, #0
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f001 faf8 	bl	800666e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2240      	movs	r2, #64	; 0x40
 800508a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800508e:	2340      	movs	r3, #64	; 0x40
 8005090:	2200      	movs	r2, #0
 8005092:	2180      	movs	r1, #128	; 0x80
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f001 faea 	bl	800666e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2240      	movs	r2, #64	; 0x40
 80050a4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2204      	movs	r2, #4
 80050ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b04      	cmp	r3, #4
 800510e:	d106      	bne.n	800511e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005116:	b2da      	uxtb	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800513e:	2303      	movs	r3, #3
 8005140:	e012      	b.n	8005168 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b03      	cmp	r3, #3
 800514c:	d10b      	bne.n	8005166 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005186:	2303      	movs	r3, #3
 8005188:	e014      	b.n	80051b4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b03      	cmp	r3, #3
 8005194:	d10d      	bne.n	80051b2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	4611      	mov	r1, r2
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e014      	b.n	8005200 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d10d      	bne.n	80051fe <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	78fa      	ldrb	r2, [r7, #3]
 80051f8:	4611      	mov	r1, r2
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6852      	ldr	r2, [r2, #4]
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	4611      	mov	r1, r2
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	4798      	blx	r3
  }

  return USBD_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005256:	b480      	push	{r7}
 8005258:	b087      	sub	sp, #28
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	3301      	adds	r3, #1
 800526c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005274:	8a3b      	ldrh	r3, [r7, #16]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	b21a      	sxth	r2, r3
 800527a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800527e:	4313      	orrs	r3, r2
 8005280:	b21b      	sxth	r3, r3
 8005282:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005284:	89fb      	ldrh	r3, [r7, #14]
}
 8005286:	4618      	mov	r0, r3
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052aa:	2b40      	cmp	r3, #64	; 0x40
 80052ac:	d005      	beq.n	80052ba <USBD_StdDevReq+0x26>
 80052ae:	2b40      	cmp	r3, #64	; 0x40
 80052b0:	d853      	bhi.n	800535a <USBD_StdDevReq+0xc6>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <USBD_StdDevReq+0x3a>
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d14f      	bne.n	800535a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	6839      	ldr	r1, [r7, #0]
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	4798      	blx	r3
 80052c8:	4603      	mov	r3, r0
 80052ca:	73fb      	strb	r3, [r7, #15]
      break;
 80052cc:	e04a      	b.n	8005364 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	2b09      	cmp	r3, #9
 80052d4:	d83b      	bhi.n	800534e <USBD_StdDevReq+0xba>
 80052d6:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <USBD_StdDevReq+0x48>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	08005331 	.word	0x08005331
 80052e0:	08005345 	.word	0x08005345
 80052e4:	0800534f 	.word	0x0800534f
 80052e8:	0800533b 	.word	0x0800533b
 80052ec:	0800534f 	.word	0x0800534f
 80052f0:	0800530f 	.word	0x0800530f
 80052f4:	08005305 	.word	0x08005305
 80052f8:	0800534f 	.word	0x0800534f
 80052fc:	08005327 	.word	0x08005327
 8005300:	08005319 	.word	0x08005319
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f9de 	bl	80056c8 <USBD_GetDescriptor>
          break;
 800530c:	e024      	b.n	8005358 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800530e:	6839      	ldr	r1, [r7, #0]
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fb43 	bl	800599c <USBD_SetAddress>
          break;
 8005316:	e01f      	b.n	8005358 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fb82 	bl	8005a24 <USBD_SetConfig>
 8005320:	4603      	mov	r3, r0
 8005322:	73fb      	strb	r3, [r7, #15]
          break;
 8005324:	e018      	b.n	8005358 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005326:	6839      	ldr	r1, [r7, #0]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fc21 	bl	8005b70 <USBD_GetConfig>
          break;
 800532e:	e013      	b.n	8005358 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fc52 	bl	8005bdc <USBD_GetStatus>
          break;
 8005338:	e00e      	b.n	8005358 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fc81 	bl	8005c44 <USBD_SetFeature>
          break;
 8005342:	e009      	b.n	8005358 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fc90 	bl	8005c6c <USBD_ClrFeature>
          break;
 800534c:	e004      	b.n	8005358 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800534e:	6839      	ldr	r1, [r7, #0]
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fce7 	bl	8005d24 <USBD_CtlError>
          break;
 8005356:	bf00      	nop
      }
      break;
 8005358:	e004      	b.n	8005364 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fce1 	bl	8005d24 <USBD_CtlError>
      break;
 8005362:	bf00      	nop
  }

  return ret;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop

08005370 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005386:	2b40      	cmp	r3, #64	; 0x40
 8005388:	d005      	beq.n	8005396 <USBD_StdItfReq+0x26>
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d82f      	bhi.n	80053ee <USBD_StdItfReq+0x7e>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <USBD_StdItfReq+0x26>
 8005392:	2b20      	cmp	r3, #32
 8005394:	d12b      	bne.n	80053ee <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800539c:	b2db      	uxtb	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d81d      	bhi.n	80053e0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	889b      	ldrh	r3, [r3, #4]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d813      	bhi.n	80053d6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3
 80053bc:	4603      	mov	r3, r0
 80053be:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	88db      	ldrh	r3, [r3, #6]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d110      	bne.n	80053ea <USBD_StdItfReq+0x7a>
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10d      	bne.n	80053ea <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fd73 	bl	8005eba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80053d4:	e009      	b.n	80053ea <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fca3 	bl	8005d24 <USBD_CtlError>
          break;
 80053de:	e004      	b.n	80053ea <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fc9e 	bl	8005d24 <USBD_CtlError>
          break;
 80053e8:	e000      	b.n	80053ec <USBD_StdItfReq+0x7c>
          break;
 80053ea:	bf00      	nop
      }
      break;
 80053ec:	e004      	b.n	80053f8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fc97 	bl	8005d24 <USBD_CtlError>
      break;
 80053f6:	bf00      	nop
  }

  return ret;
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	889b      	ldrh	r3, [r3, #4]
 8005414:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d007      	beq.n	8005432 <USBD_StdEPReq+0x30>
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	f200 8145 	bhi.w	80056b2 <USBD_StdEPReq+0x2b0>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00c      	beq.n	8005446 <USBD_StdEPReq+0x44>
 800542c:	2b20      	cmp	r3, #32
 800542e:	f040 8140 	bne.w	80056b2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	6839      	ldr	r1, [r7, #0]
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	4798      	blx	r3
 8005440:	4603      	mov	r3, r0
 8005442:	73fb      	strb	r3, [r7, #15]
      break;
 8005444:	e13a      	b.n	80056bc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	785b      	ldrb	r3, [r3, #1]
 800544a:	2b03      	cmp	r3, #3
 800544c:	d007      	beq.n	800545e <USBD_StdEPReq+0x5c>
 800544e:	2b03      	cmp	r3, #3
 8005450:	f300 8129 	bgt.w	80056a6 <USBD_StdEPReq+0x2a4>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d07f      	beq.n	8005558 <USBD_StdEPReq+0x156>
 8005458:	2b01      	cmp	r3, #1
 800545a:	d03c      	beq.n	80054d6 <USBD_StdEPReq+0xd4>
 800545c:	e123      	b.n	80056a6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d002      	beq.n	8005470 <USBD_StdEPReq+0x6e>
 800546a:	2b03      	cmp	r3, #3
 800546c:	d016      	beq.n	800549c <USBD_StdEPReq+0x9a>
 800546e:	e02c      	b.n	80054ca <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005470:	7bbb      	ldrb	r3, [r7, #14]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00d      	beq.n	8005492 <USBD_StdEPReq+0x90>
 8005476:	7bbb      	ldrb	r3, [r7, #14]
 8005478:	2b80      	cmp	r3, #128	; 0x80
 800547a:	d00a      	beq.n	8005492 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800547c:	7bbb      	ldrb	r3, [r7, #14]
 800547e:	4619      	mov	r1, r3
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f001 f939 	bl	80066f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005486:	2180      	movs	r1, #128	; 0x80
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f001 f935 	bl	80066f8 <USBD_LL_StallEP>
 800548e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005490:	e020      	b.n	80054d4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fc45 	bl	8005d24 <USBD_CtlError>
              break;
 800549a:	e01b      	b.n	80054d4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	885b      	ldrh	r3, [r3, #2]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10e      	bne.n	80054c2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80054a4:	7bbb      	ldrb	r3, [r7, #14]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <USBD_StdEPReq+0xc0>
 80054aa:	7bbb      	ldrb	r3, [r7, #14]
 80054ac:	2b80      	cmp	r3, #128	; 0x80
 80054ae:	d008      	beq.n	80054c2 <USBD_StdEPReq+0xc0>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	88db      	ldrh	r3, [r3, #6]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80054b8:	7bbb      	ldrb	r3, [r7, #14]
 80054ba:	4619      	mov	r1, r3
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 f91b 	bl	80066f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fcf9 	bl	8005eba <USBD_CtlSendStatus>

              break;
 80054c8:	e004      	b.n	80054d4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fc29 	bl	8005d24 <USBD_CtlError>
              break;
 80054d2:	bf00      	nop
          }
          break;
 80054d4:	e0ec      	b.n	80056b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d002      	beq.n	80054e8 <USBD_StdEPReq+0xe6>
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d016      	beq.n	8005514 <USBD_StdEPReq+0x112>
 80054e6:	e030      	b.n	800554a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054e8:	7bbb      	ldrb	r3, [r7, #14]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00d      	beq.n	800550a <USBD_StdEPReq+0x108>
 80054ee:	7bbb      	ldrb	r3, [r7, #14]
 80054f0:	2b80      	cmp	r3, #128	; 0x80
 80054f2:	d00a      	beq.n	800550a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80054f4:	7bbb      	ldrb	r3, [r7, #14]
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f001 f8fd 	bl	80066f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80054fe:	2180      	movs	r1, #128	; 0x80
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 f8f9 	bl	80066f8 <USBD_LL_StallEP>
 8005506:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005508:	e025      	b.n	8005556 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800550a:	6839      	ldr	r1, [r7, #0]
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fc09 	bl	8005d24 <USBD_CtlError>
              break;
 8005512:	e020      	b.n	8005556 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	885b      	ldrh	r3, [r3, #2]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d11b      	bne.n	8005554 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800551c:	7bbb      	ldrb	r3, [r7, #14]
 800551e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005522:	2b00      	cmp	r3, #0
 8005524:	d004      	beq.n	8005530 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005526:	7bbb      	ldrb	r3, [r7, #14]
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f001 f903 	bl	8006736 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fcc2 	bl	8005eba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	6839      	ldr	r1, [r7, #0]
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	4798      	blx	r3
 8005544:	4603      	mov	r3, r0
 8005546:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005548:	e004      	b.n	8005554 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fbe9 	bl	8005d24 <USBD_CtlError>
              break;
 8005552:	e000      	b.n	8005556 <USBD_StdEPReq+0x154>
              break;
 8005554:	bf00      	nop
          }
          break;
 8005556:	e0ab      	b.n	80056b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d002      	beq.n	800556a <USBD_StdEPReq+0x168>
 8005564:	2b03      	cmp	r3, #3
 8005566:	d032      	beq.n	80055ce <USBD_StdEPReq+0x1cc>
 8005568:	e097      	b.n	800569a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800556a:	7bbb      	ldrb	r3, [r7, #14]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <USBD_StdEPReq+0x17e>
 8005570:	7bbb      	ldrb	r3, [r7, #14]
 8005572:	2b80      	cmp	r3, #128	; 0x80
 8005574:	d004      	beq.n	8005580 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fbd3 	bl	8005d24 <USBD_CtlError>
                break;
 800557e:	e091      	b.n	80056a4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005584:	2b00      	cmp	r3, #0
 8005586:	da0b      	bge.n	80055a0 <USBD_StdEPReq+0x19e>
 8005588:	7bbb      	ldrb	r3, [r7, #14]
 800558a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	3310      	adds	r3, #16
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	4413      	add	r3, r2
 800559c:	3304      	adds	r3, #4
 800559e:	e00b      	b.n	80055b8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	4413      	add	r3, r2
 80055b6:	3304      	adds	r3, #4
 80055b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2202      	movs	r2, #2
 80055c4:	4619      	mov	r1, r3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fc1d 	bl	8005e06 <USBD_CtlSendData>
              break;
 80055cc:	e06a      	b.n	80056a4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80055ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da11      	bge.n	80055fa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80055d6:	7bbb      	ldrb	r3, [r7, #14]
 80055d8:	f003 020f 	and.w	r2, r3, #15
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	3324      	adds	r3, #36	; 0x24
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d117      	bne.n	8005620 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fb96 	bl	8005d24 <USBD_CtlError>
                  break;
 80055f8:	e054      	b.n	80056a4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80055fa:	7bbb      	ldrb	r3, [r7, #14]
 80055fc:	f003 020f 	and.w	r2, r3, #15
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d104      	bne.n	8005620 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fb83 	bl	8005d24 <USBD_CtlError>
                  break;
 800561e:	e041      	b.n	80056a4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005624:	2b00      	cmp	r3, #0
 8005626:	da0b      	bge.n	8005640 <USBD_StdEPReq+0x23e>
 8005628:	7bbb      	ldrb	r3, [r7, #14]
 800562a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	3310      	adds	r3, #16
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	4413      	add	r3, r2
 800563c:	3304      	adds	r3, #4
 800563e:	e00b      	b.n	8005658 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005640:	7bbb      	ldrb	r3, [r7, #14]
 8005642:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4413      	add	r3, r2
 8005656:	3304      	adds	r3, #4
 8005658:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800565a:	7bbb      	ldrb	r3, [r7, #14]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <USBD_StdEPReq+0x264>
 8005660:	7bbb      	ldrb	r3, [r7, #14]
 8005662:	2b80      	cmp	r3, #128	; 0x80
 8005664:	d103      	bne.n	800566e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e00e      	b.n	800568c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800566e:	7bbb      	ldrb	r3, [r7, #14]
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f001 f87e 	bl	8006774 <USBD_LL_IsStallEP>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e002      	b.n	800568c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2202      	movs	r2, #2
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fbb7 	bl	8005e06 <USBD_CtlSendData>
              break;
 8005698:	e004      	b.n	80056a4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fb41 	bl	8005d24 <USBD_CtlError>
              break;
 80056a2:	bf00      	nop
          }
          break;
 80056a4:	e004      	b.n	80056b0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fb3b 	bl	8005d24 <USBD_CtlError>
          break;
 80056ae:	bf00      	nop
      }
      break;
 80056b0:	e004      	b.n	80056bc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fb35 	bl	8005d24 <USBD_CtlError>
      break;
 80056ba:	bf00      	nop
  }

  return ret;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	885b      	ldrh	r3, [r3, #2]
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	2b06      	cmp	r3, #6
 80056ea:	f200 8128 	bhi.w	800593e <USBD_GetDescriptor+0x276>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <USBD_GetDescriptor+0x2c>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	08005711 	.word	0x08005711
 80056f8:	08005729 	.word	0x08005729
 80056fc:	08005769 	.word	0x08005769
 8005700:	0800593f 	.word	0x0800593f
 8005704:	0800593f 	.word	0x0800593f
 8005708:	080058df 	.word	0x080058df
 800570c:	0800590b 	.word	0x0800590b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	7c12      	ldrb	r2, [r2, #16]
 800571c:	f107 0108 	add.w	r1, r7, #8
 8005720:	4610      	mov	r0, r2
 8005722:	4798      	blx	r3
 8005724:	60f8      	str	r0, [r7, #12]
      break;
 8005726:	e112      	b.n	800594e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	7c1b      	ldrb	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10d      	bne.n	800574c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	f107 0208 	add.w	r2, r7, #8
 800573c:	4610      	mov	r0, r2
 800573e:	4798      	blx	r3
 8005740:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3301      	adds	r3, #1
 8005746:	2202      	movs	r2, #2
 8005748:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800574a:	e100      	b.n	800594e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	f107 0208 	add.w	r2, r7, #8
 8005758:	4610      	mov	r0, r2
 800575a:	4798      	blx	r3
 800575c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3301      	adds	r3, #1
 8005762:	2202      	movs	r2, #2
 8005764:	701a      	strb	r2, [r3, #0]
      break;
 8005766:	e0f2      	b.n	800594e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	885b      	ldrh	r3, [r3, #2]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b05      	cmp	r3, #5
 8005770:	f200 80ac 	bhi.w	80058cc <USBD_GetDescriptor+0x204>
 8005774:	a201      	add	r2, pc, #4	; (adr r2, 800577c <USBD_GetDescriptor+0xb4>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	08005795 	.word	0x08005795
 8005780:	080057c9 	.word	0x080057c9
 8005784:	080057fd 	.word	0x080057fd
 8005788:	08005831 	.word	0x08005831
 800578c:	08005865 	.word	0x08005865
 8005790:	08005899 	.word	0x08005899
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	7c12      	ldrb	r2, [r2, #16]
 80057ac:	f107 0108 	add.w	r1, r7, #8
 80057b0:	4610      	mov	r0, r2
 80057b2:	4798      	blx	r3
 80057b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057b6:	e091      	b.n	80058dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fab2 	bl	8005d24 <USBD_CtlError>
            err++;
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	3301      	adds	r3, #1
 80057c4:	72fb      	strb	r3, [r7, #11]
          break;
 80057c6:	e089      	b.n	80058dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	7c12      	ldrb	r2, [r2, #16]
 80057e0:	f107 0108 	add.w	r1, r7, #8
 80057e4:	4610      	mov	r0, r2
 80057e6:	4798      	blx	r3
 80057e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057ea:	e077      	b.n	80058dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa98 	bl	8005d24 <USBD_CtlError>
            err++;
 80057f4:	7afb      	ldrb	r3, [r7, #11]
 80057f6:	3301      	adds	r3, #1
 80057f8:	72fb      	strb	r3, [r7, #11]
          break;
 80057fa:	e06f      	b.n	80058dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00b      	beq.n	8005820 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	7c12      	ldrb	r2, [r2, #16]
 8005814:	f107 0108 	add.w	r1, r7, #8
 8005818:	4610      	mov	r0, r2
 800581a:	4798      	blx	r3
 800581c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800581e:	e05d      	b.n	80058dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa7e 	bl	8005d24 <USBD_CtlError>
            err++;
 8005828:	7afb      	ldrb	r3, [r7, #11]
 800582a:	3301      	adds	r3, #1
 800582c:	72fb      	strb	r3, [r7, #11]
          break;
 800582e:	e055      	b.n	80058dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	7c12      	ldrb	r2, [r2, #16]
 8005848:	f107 0108 	add.w	r1, r7, #8
 800584c:	4610      	mov	r0, r2
 800584e:	4798      	blx	r3
 8005850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005852:	e043      	b.n	80058dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fa64 	bl	8005d24 <USBD_CtlError>
            err++;
 800585c:	7afb      	ldrb	r3, [r7, #11]
 800585e:	3301      	adds	r3, #1
 8005860:	72fb      	strb	r3, [r7, #11]
          break;
 8005862:	e03b      	b.n	80058dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00b      	beq.n	8005888 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	7c12      	ldrb	r2, [r2, #16]
 800587c:	f107 0108 	add.w	r1, r7, #8
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
 8005884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005886:	e029      	b.n	80058dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa4a 	bl	8005d24 <USBD_CtlError>
            err++;
 8005890:	7afb      	ldrb	r3, [r7, #11]
 8005892:	3301      	adds	r3, #1
 8005894:	72fb      	strb	r3, [r7, #11]
          break;
 8005896:	e021      	b.n	80058dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00b      	beq.n	80058bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	7c12      	ldrb	r2, [r2, #16]
 80058b0:	f107 0108 	add.w	r1, r7, #8
 80058b4:	4610      	mov	r0, r2
 80058b6:	4798      	blx	r3
 80058b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058ba:	e00f      	b.n	80058dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fa30 	bl	8005d24 <USBD_CtlError>
            err++;
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	3301      	adds	r3, #1
 80058c8:	72fb      	strb	r3, [r7, #11]
          break;
 80058ca:	e007      	b.n	80058dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fa28 	bl	8005d24 <USBD_CtlError>
          err++;
 80058d4:	7afb      	ldrb	r3, [r7, #11]
 80058d6:	3301      	adds	r3, #1
 80058d8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80058da:	bf00      	nop
      }
      break;
 80058dc:	e037      	b.n	800594e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	7c1b      	ldrb	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	f107 0208 	add.w	r2, r7, #8
 80058f2:	4610      	mov	r0, r2
 80058f4:	4798      	blx	r3
 80058f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058f8:	e029      	b.n	800594e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fa11 	bl	8005d24 <USBD_CtlError>
        err++;
 8005902:	7afb      	ldrb	r3, [r7, #11]
 8005904:	3301      	adds	r3, #1
 8005906:	72fb      	strb	r3, [r7, #11]
      break;
 8005908:	e021      	b.n	800594e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	7c1b      	ldrb	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10d      	bne.n	800592e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	f107 0208 	add.w	r2, r7, #8
 800591e:	4610      	mov	r0, r2
 8005920:	4798      	blx	r3
 8005922:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	2207      	movs	r2, #7
 800592a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800592c:	e00f      	b.n	800594e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f9f7 	bl	8005d24 <USBD_CtlError>
        err++;
 8005936:	7afb      	ldrb	r3, [r7, #11]
 8005938:	3301      	adds	r3, #1
 800593a:	72fb      	strb	r3, [r7, #11]
      break;
 800593c:	e007      	b.n	800594e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f9ef 	bl	8005d24 <USBD_CtlError>
      err++;
 8005946:	7afb      	ldrb	r3, [r7, #11]
 8005948:	3301      	adds	r3, #1
 800594a:	72fb      	strb	r3, [r7, #11]
      break;
 800594c:	bf00      	nop
  }

  if (err != 0U)
 800594e:	7afb      	ldrb	r3, [r7, #11]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d11e      	bne.n	8005992 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	88db      	ldrh	r3, [r3, #6]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d016      	beq.n	800598a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800595c:	893b      	ldrh	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00e      	beq.n	8005980 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	88da      	ldrh	r2, [r3, #6]
 8005966:	893b      	ldrh	r3, [r7, #8]
 8005968:	4293      	cmp	r3, r2
 800596a:	bf28      	it	cs
 800596c:	4613      	movcs	r3, r2
 800596e:	b29b      	uxth	r3, r3
 8005970:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005972:	893b      	ldrh	r3, [r7, #8]
 8005974:	461a      	mov	r2, r3
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fa44 	bl	8005e06 <USBD_CtlSendData>
 800597e:	e009      	b.n	8005994 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f9ce 	bl	8005d24 <USBD_CtlError>
 8005988:	e004      	b.n	8005994 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa95 	bl	8005eba <USBD_CtlSendStatus>
 8005990:	e000      	b.n	8005994 <USBD_GetDescriptor+0x2cc>
    return;
 8005992:	bf00      	nop
  }
}
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop

0800599c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	889b      	ldrh	r3, [r3, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d131      	bne.n	8005a12 <USBD_SetAddress+0x76>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	88db      	ldrh	r3, [r3, #6]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d12d      	bne.n	8005a12 <USBD_SetAddress+0x76>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	885b      	ldrh	r3, [r3, #2]
 80059ba:	2b7f      	cmp	r3, #127	; 0x7f
 80059bc:	d829      	bhi.n	8005a12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	885b      	ldrh	r3, [r3, #2]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d104      	bne.n	80059e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f9a3 	bl	8005d24 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059de:	e01d      	b.n	8005a1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	7bfa      	ldrb	r2, [r7, #15]
 80059e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 feed 	bl	80067cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa61 	bl	8005eba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2202      	movs	r2, #2
 8005a02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a06:	e009      	b.n	8005a1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a10:	e004      	b.n	8005a1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f985 	bl	8005d24 <USBD_CtlError>
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	bf00      	nop
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	885b      	ldrh	r3, [r3, #2]
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	4b4c      	ldr	r3, [pc, #304]	; (8005b6c <USBD_SetConfig+0x148>)
 8005a3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005a3c:	4b4b      	ldr	r3, [pc, #300]	; (8005b6c <USBD_SetConfig+0x148>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d905      	bls.n	8005a50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f96c 	bl	8005d24 <USBD_CtlError>
    return USBD_FAIL;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e088      	b.n	8005b62 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d002      	beq.n	8005a62 <USBD_SetConfig+0x3e>
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d025      	beq.n	8005aac <USBD_SetConfig+0x88>
 8005a60:	e071      	b.n	8005b46 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005a62:	4b42      	ldr	r3, [pc, #264]	; (8005b6c <USBD_SetConfig+0x148>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d01c      	beq.n	8005aa4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005a6a:	4b40      	ldr	r3, [pc, #256]	; (8005b6c <USBD_SetConfig+0x148>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a74:	4b3d      	ldr	r3, [pc, #244]	; (8005b6c <USBD_SetConfig+0x148>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff f948 	bl	8004d10 <USBD_SetClassConfig>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f949 	bl	8005d24 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a92:	e065      	b.n	8005b60 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fa10 	bl	8005eba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005aa2:	e05d      	b.n	8005b60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fa08 	bl	8005eba <USBD_CtlSendStatus>
      break;
 8005aaa:	e059      	b.n	8005b60 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005aac:	4b2f      	ldr	r3, [pc, #188]	; (8005b6c <USBD_SetConfig+0x148>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d112      	bne.n	8005ada <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005abc:	4b2b      	ldr	r3, [pc, #172]	; (8005b6c <USBD_SetConfig+0x148>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ac6:	4b29      	ldr	r3, [pc, #164]	; (8005b6c <USBD_SetConfig+0x148>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff f93b 	bl	8004d48 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f9f1 	bl	8005eba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ad8:	e042      	b.n	8005b60 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005ada:	4b24      	ldr	r3, [pc, #144]	; (8005b6c <USBD_SetConfig+0x148>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d02a      	beq.n	8005b3e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff f929 	bl	8004d48 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005af6:	4b1d      	ldr	r3, [pc, #116]	; (8005b6c <USBD_SetConfig+0x148>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005b00:	4b1a      	ldr	r3, [pc, #104]	; (8005b6c <USBD_SetConfig+0x148>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff f902 	bl	8004d10 <USBD_SetClassConfig>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00f      	beq.n	8005b36 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f903 	bl	8005d24 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff f90e 	bl	8004d48 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005b34:	e014      	b.n	8005b60 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f9bf 	bl	8005eba <USBD_CtlSendStatus>
      break;
 8005b3c:	e010      	b.n	8005b60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f9bb 	bl	8005eba <USBD_CtlSendStatus>
      break;
 8005b44:	e00c      	b.n	8005b60 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f8eb 	bl	8005d24 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <USBD_SetConfig+0x148>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff f8f7 	bl	8004d48 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5e:	bf00      	nop
  }

  return ret;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	200001a0 	.word	0x200001a0

08005b70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	88db      	ldrh	r3, [r3, #6]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d004      	beq.n	8005b8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f8cd 	bl	8005d24 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005b8a:	e023      	b.n	8005bd4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	dc02      	bgt.n	8005b9e <USBD_GetConfig+0x2e>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	dc03      	bgt.n	8005ba4 <USBD_GetConfig+0x34>
 8005b9c:	e015      	b.n	8005bca <USBD_GetConfig+0x5a>
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d00b      	beq.n	8005bba <USBD_GetConfig+0x4a>
 8005ba2:	e012      	b.n	8005bca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3308      	adds	r3, #8
 8005bae:	2201      	movs	r2, #1
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f927 	bl	8005e06 <USBD_CtlSendData>
        break;
 8005bb8:	e00c      	b.n	8005bd4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f91f 	bl	8005e06 <USBD_CtlSendData>
        break;
 8005bc8:	e004      	b.n	8005bd4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f8a9 	bl	8005d24 <USBD_CtlError>
        break;
 8005bd2:	bf00      	nop
}
 8005bd4:	bf00      	nop
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d81e      	bhi.n	8005c32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	88db      	ldrh	r3, [r3, #6]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d004      	beq.n	8005c06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f890 	bl	8005d24 <USBD_CtlError>
        break;
 8005c04:	e01a      	b.n	8005c3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f043 0202 	orr.w	r2, r3, #2
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	330c      	adds	r3, #12
 8005c26:	2202      	movs	r2, #2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f8eb 	bl	8005e06 <USBD_CtlSendData>
      break;
 8005c30:	e004      	b.n	8005c3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f875 	bl	8005d24 <USBD_CtlError>
      break;
 8005c3a:	bf00      	nop
  }
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	885b      	ldrh	r3, [r3, #2]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d106      	bne.n	8005c64 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f92b 	bl	8005eba <USBD_CtlSendStatus>
  }
}
 8005c64:	bf00      	nop
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d80b      	bhi.n	8005c9c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	885b      	ldrh	r3, [r3, #2]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d10c      	bne.n	8005ca6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f910 	bl	8005eba <USBD_CtlSendStatus>
      }
      break;
 8005c9a:	e004      	b.n	8005ca6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f840 	bl	8005d24 <USBD_CtlError>
      break;
 8005ca4:	e000      	b.n	8005ca8 <USBD_ClrFeature+0x3c>
      break;
 8005ca6:	bf00      	nop
  }
}
 8005ca8:	bf00      	nop
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	781a      	ldrb	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff fabb 	bl	8005256 <SWAPBYTE>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3301      	adds	r3, #1
 8005cec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7ff faae 	bl	8005256 <SWAPBYTE>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3301      	adds	r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f7ff faa1 	bl	8005256 <SWAPBYTE>
 8005d14:	4603      	mov	r3, r0
 8005d16:	461a      	mov	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	80da      	strh	r2, [r3, #6]
}
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d2e:	2180      	movs	r1, #128	; 0x80
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fce1 	bl	80066f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005d36:	2100      	movs	r1, #0
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fcdd 	bl	80066f8 <USBD_LL_StallEP>
}
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b086      	sub	sp, #24
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d036      	beq.n	8005dca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005d60:	6938      	ldr	r0, [r7, #16]
 8005d62:	f000 f836 	bl	8005dd2 <USBD_GetLen>
 8005d66:	4603      	mov	r3, r0
 8005d68:	3301      	adds	r3, #1
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	4413      	add	r3, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	7812      	ldrb	r2, [r2, #0]
 8005d7e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	3301      	adds	r3, #1
 8005d84:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	2203      	movs	r2, #3
 8005d8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
 8005d92:	3301      	adds	r3, #1
 8005d94:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005d96:	e013      	b.n	8005dc0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	7812      	ldrb	r2, [r2, #0]
 8005da2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	3301      	adds	r3, #1
 8005da8:	613b      	str	r3, [r7, #16]
    idx++;
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	3301      	adds	r3, #1
 8005dae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	4413      	add	r3, r2
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
    idx++;
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e7      	bne.n	8005d98 <USBD_GetString+0x52>
 8005dc8:	e000      	b.n	8005dcc <USBD_GetString+0x86>
    return;
 8005dca:	bf00      	nop
  }
}
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b085      	sub	sp, #20
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005de2:	e005      	b.n	8005df0 <USBD_GetLen+0x1e>
  {
    len++;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	3301      	adds	r3, #1
 8005de8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	3301      	adds	r3, #1
 8005dee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1f5      	bne.n	8005de4 <USBD_GetLen+0x12>
  }

  return len;
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2202      	movs	r2, #2
 8005e16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 fcec 	bl	800680a <USBD_LL_Transmit>

  return USBD_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 fcdb 	bl	800680a <USBD_LL_Transmit>

  return USBD_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	2100      	movs	r1, #0
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fcdf 	bl	800684c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 fcce 	bl	800684c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005eca:	2300      	movs	r3, #0
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2100      	movs	r1, #0
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fc9a 	bl	800680a <USBD_LL_Transmit>

  return USBD_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2205      	movs	r2, #5
 8005eec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fca8 	bl	800684c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	4912      	ldr	r1, [pc, #72]	; (8005f58 <MX_USB_DEVICE_Init+0x50>)
 8005f10:	4812      	ldr	r0, [pc, #72]	; (8005f5c <MX_USB_DEVICE_Init+0x54>)
 8005f12:	f7fe fe8f 	bl	8004c34 <USBD_Init>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005f1c:	f7fa fc06 	bl	800072c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005f20:	490f      	ldr	r1, [pc, #60]	; (8005f60 <MX_USB_DEVICE_Init+0x58>)
 8005f22:	480e      	ldr	r0, [pc, #56]	; (8005f5c <MX_USB_DEVICE_Init+0x54>)
 8005f24:	f7fe feb6 	bl	8004c94 <USBD_RegisterClass>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005f2e:	f7fa fbfd 	bl	800072c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005f32:	490c      	ldr	r1, [pc, #48]	; (8005f64 <MX_USB_DEVICE_Init+0x5c>)
 8005f34:	4809      	ldr	r0, [pc, #36]	; (8005f5c <MX_USB_DEVICE_Init+0x54>)
 8005f36:	f7fe fdd7 	bl	8004ae8 <USBD_CDC_RegisterInterface>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005f40:	f7fa fbf4 	bl	800072c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005f44:	4805      	ldr	r0, [pc, #20]	; (8005f5c <MX_USB_DEVICE_Init+0x54>)
 8005f46:	f7fe fecc 	bl	8004ce2 <USBD_Start>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005f50:	f7fa fbec 	bl	800072c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f54:	bf00      	nop
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20000134 	.word	0x20000134
 8005f5c:	2000040c 	.word	0x2000040c
 8005f60:	2000001c 	.word	0x2000001c
 8005f64:	20000120 	.word	0x20000120

08005f68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4905      	ldr	r1, [pc, #20]	; (8005f84 <CDC_Init_FS+0x1c>)
 8005f70:	4805      	ldr	r0, [pc, #20]	; (8005f88 <CDC_Init_FS+0x20>)
 8005f72:	f7fe fdce 	bl	8004b12 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005f76:	4905      	ldr	r1, [pc, #20]	; (8005f8c <CDC_Init_FS+0x24>)
 8005f78:	4803      	ldr	r0, [pc, #12]	; (8005f88 <CDC_Init_FS+0x20>)
 8005f7a:	f7fe fde8 	bl	8004b4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005f7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20000edc 	.word	0x20000edc
 8005f88:	2000040c 	.word	0x2000040c
 8005f8c:	200006dc 	.word	0x200006dc

08005f90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005f94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	6039      	str	r1, [r7, #0]
 8005faa:	71fb      	strb	r3, [r7, #7]
 8005fac:	4613      	mov	r3, r2
 8005fae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	2b23      	cmp	r3, #35	; 0x23
 8005fb4:	d84a      	bhi.n	800604c <CDC_Control_FS+0xac>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <CDC_Control_FS+0x1c>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	0800604d 	.word	0x0800604d
 8005fc0:	0800604d 	.word	0x0800604d
 8005fc4:	0800604d 	.word	0x0800604d
 8005fc8:	0800604d 	.word	0x0800604d
 8005fcc:	0800604d 	.word	0x0800604d
 8005fd0:	0800604d 	.word	0x0800604d
 8005fd4:	0800604d 	.word	0x0800604d
 8005fd8:	0800604d 	.word	0x0800604d
 8005fdc:	0800604d 	.word	0x0800604d
 8005fe0:	0800604d 	.word	0x0800604d
 8005fe4:	0800604d 	.word	0x0800604d
 8005fe8:	0800604d 	.word	0x0800604d
 8005fec:	0800604d 	.word	0x0800604d
 8005ff0:	0800604d 	.word	0x0800604d
 8005ff4:	0800604d 	.word	0x0800604d
 8005ff8:	0800604d 	.word	0x0800604d
 8005ffc:	0800604d 	.word	0x0800604d
 8006000:	0800604d 	.word	0x0800604d
 8006004:	0800604d 	.word	0x0800604d
 8006008:	0800604d 	.word	0x0800604d
 800600c:	0800604d 	.word	0x0800604d
 8006010:	0800604d 	.word	0x0800604d
 8006014:	0800604d 	.word	0x0800604d
 8006018:	0800604d 	.word	0x0800604d
 800601c:	0800604d 	.word	0x0800604d
 8006020:	0800604d 	.word	0x0800604d
 8006024:	0800604d 	.word	0x0800604d
 8006028:	0800604d 	.word	0x0800604d
 800602c:	0800604d 	.word	0x0800604d
 8006030:	0800604d 	.word	0x0800604d
 8006034:	0800604d 	.word	0x0800604d
 8006038:	0800604d 	.word	0x0800604d
 800603c:	0800604d 	.word	0x0800604d
 8006040:	0800604d 	.word	0x0800604d
 8006044:	0800604d 	.word	0x0800604d
 8006048:	0800604d 	.word	0x0800604d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800604c:	bf00      	nop
  }

  return (USBD_OK);
 800604e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4805      	ldr	r0, [pc, #20]	; (8006080 <CDC_Receive_FS+0x24>)
 800606a:	f7fe fd70 	bl	8004b4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800606e:	4804      	ldr	r0, [pc, #16]	; (8006080 <CDC_Receive_FS+0x24>)
 8006070:	f7fe fdb6 	bl	8004be0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006074:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	2000040c 	.word	0x2000040c

08006084 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006094:	4b0d      	ldr	r3, [pc, #52]	; (80060cc <CDC_Transmit_FS+0x48>)
 8006096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800609a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e00b      	b.n	80060c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80060aa:	887b      	ldrh	r3, [r7, #2]
 80060ac:	461a      	mov	r2, r3
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	4806      	ldr	r0, [pc, #24]	; (80060cc <CDC_Transmit_FS+0x48>)
 80060b2:	f7fe fd2e 	bl	8004b12 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80060b6:	4805      	ldr	r0, [pc, #20]	; (80060cc <CDC_Transmit_FS+0x48>)
 80060b8:	f7fe fd62 	bl	8004b80 <USBD_CDC_TransmitPacket>
 80060bc:	4603      	mov	r3, r0
 80060be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	2000040c 	.word	0x2000040c

080060d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	4613      	mov	r3, r2
 80060dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80060e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	6039      	str	r1, [r7, #0]
 80060fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2212      	movs	r2, #18
 8006104:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006106:	4b03      	ldr	r3, [pc, #12]	; (8006114 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	20000150 	.word	0x20000150

08006118 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	6039      	str	r1, [r7, #0]
 8006122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2204      	movs	r2, #4
 8006128:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800612a:	4b03      	ldr	r3, [pc, #12]	; (8006138 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	20000164 	.word	0x20000164

0800613c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	4603      	mov	r3, r0
 8006144:	6039      	str	r1, [r7, #0]
 8006146:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d105      	bne.n	800615a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	4907      	ldr	r1, [pc, #28]	; (8006170 <USBD_FS_ProductStrDescriptor+0x34>)
 8006152:	4808      	ldr	r0, [pc, #32]	; (8006174 <USBD_FS_ProductStrDescriptor+0x38>)
 8006154:	f7ff fdf7 	bl	8005d46 <USBD_GetString>
 8006158:	e004      	b.n	8006164 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	4904      	ldr	r1, [pc, #16]	; (8006170 <USBD_FS_ProductStrDescriptor+0x34>)
 800615e:	4805      	ldr	r0, [pc, #20]	; (8006174 <USBD_FS_ProductStrDescriptor+0x38>)
 8006160:	f7ff fdf1 	bl	8005d46 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006164:	4b02      	ldr	r3, [pc, #8]	; (8006170 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	200016dc 	.word	0x200016dc
 8006174:	080069b4 	.word	0x080069b4

08006178 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	4603      	mov	r3, r0
 8006180:	6039      	str	r1, [r7, #0]
 8006182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	4904      	ldr	r1, [pc, #16]	; (8006198 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006188:	4804      	ldr	r0, [pc, #16]	; (800619c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800618a:	f7ff fddc 	bl	8005d46 <USBD_GetString>
  return USBD_StrDesc;
 800618e:	4b02      	ldr	r3, [pc, #8]	; (8006198 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	200016dc 	.word	0x200016dc
 800619c:	080069cc 	.word	0x080069cc

080061a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	6039      	str	r1, [r7, #0]
 80061aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	221a      	movs	r2, #26
 80061b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80061b2:	f000 f843 	bl	800623c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80061b6:	4b02      	ldr	r3, [pc, #8]	; (80061c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000168 	.word	0x20000168

080061c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	6039      	str	r1, [r7, #0]
 80061ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d105      	bne.n	80061e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	4907      	ldr	r1, [pc, #28]	; (80061f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80061da:	4808      	ldr	r0, [pc, #32]	; (80061fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80061dc:	f7ff fdb3 	bl	8005d46 <USBD_GetString>
 80061e0:	e004      	b.n	80061ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	4904      	ldr	r1, [pc, #16]	; (80061f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80061e6:	4805      	ldr	r0, [pc, #20]	; (80061fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80061e8:	f7ff fdad 	bl	8005d46 <USBD_GetString>
  }
  return USBD_StrDesc;
 80061ec:	4b02      	ldr	r3, [pc, #8]	; (80061f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200016dc 	.word	0x200016dc
 80061fc:	080069e0 	.word	0x080069e0

08006200 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	6039      	str	r1, [r7, #0]
 800620a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d105      	bne.n	800621e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	4907      	ldr	r1, [pc, #28]	; (8006234 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006216:	4808      	ldr	r0, [pc, #32]	; (8006238 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006218:	f7ff fd95 	bl	8005d46 <USBD_GetString>
 800621c:	e004      	b.n	8006228 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	4904      	ldr	r1, [pc, #16]	; (8006234 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006222:	4805      	ldr	r0, [pc, #20]	; (8006238 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006224:	f7ff fd8f 	bl	8005d46 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006228:	4b02      	ldr	r3, [pc, #8]	; (8006234 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	200016dc 	.word	0x200016dc
 8006238:	080069ec 	.word	0x080069ec

0800623c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <Get_SerialNum+0x44>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006248:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <Get_SerialNum+0x48>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800624e:	4b0e      	ldr	r3, [pc, #56]	; (8006288 <Get_SerialNum+0x4c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4413      	add	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006262:	2208      	movs	r2, #8
 8006264:	4909      	ldr	r1, [pc, #36]	; (800628c <Get_SerialNum+0x50>)
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f814 	bl	8006294 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800626c:	2204      	movs	r2, #4
 800626e:	4908      	ldr	r1, [pc, #32]	; (8006290 <Get_SerialNum+0x54>)
 8006270:	68b8      	ldr	r0, [r7, #8]
 8006272:	f000 f80f 	bl	8006294 <IntToUnicode>
  }
}
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	1fff7a10 	.word	0x1fff7a10
 8006284:	1fff7a14 	.word	0x1fff7a14
 8006288:	1fff7a18 	.word	0x1fff7a18
 800628c:	2000016a 	.word	0x2000016a
 8006290:	2000017a 	.word	0x2000017a

08006294 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]
 80062aa:	e027      	b.n	80062fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	0f1b      	lsrs	r3, r3, #28
 80062b0:	2b09      	cmp	r3, #9
 80062b2:	d80b      	bhi.n	80062cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	0f1b      	lsrs	r3, r3, #28
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4619      	mov	r1, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	440b      	add	r3, r1
 80062c4:	3230      	adds	r2, #48	; 0x30
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	e00a      	b.n	80062e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	0f1b      	lsrs	r3, r3, #28
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4619      	mov	r1, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	440b      	add	r3, r1
 80062dc:	3237      	adds	r2, #55	; 0x37
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	3301      	adds	r3, #1
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	4413      	add	r3, r2
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	3301      	adds	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
 80062fc:	7dfa      	ldrb	r2, [r7, #23]
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	429a      	cmp	r2, r3
 8006302:	d3d3      	bcc.n	80062ac <IntToUnicode+0x18>
  }
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
	...

08006314 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	; 0x28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800631c:	f107 0314 	add.w	r3, r7, #20
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	605a      	str	r2, [r3, #4]
 8006326:	609a      	str	r2, [r3, #8]
 8006328:	60da      	str	r2, [r3, #12]
 800632a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006334:	d13a      	bne.n	80063ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	4b1e      	ldr	r3, [pc, #120]	; (80063b4 <HAL_PCD_MspInit+0xa0>)
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	4a1d      	ldr	r2, [pc, #116]	; (80063b4 <HAL_PCD_MspInit+0xa0>)
 8006340:	f043 0301 	orr.w	r3, r3, #1
 8006344:	6313      	str	r3, [r2, #48]	; 0x30
 8006346:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <HAL_PCD_MspInit+0xa0>)
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006352:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006358:	2302      	movs	r3, #2
 800635a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800635c:	2300      	movs	r3, #0
 800635e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006360:	2303      	movs	r3, #3
 8006362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006364:	230a      	movs	r3, #10
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006368:	f107 0314 	add.w	r3, r7, #20
 800636c:	4619      	mov	r1, r3
 800636e:	4812      	ldr	r0, [pc, #72]	; (80063b8 <HAL_PCD_MspInit+0xa4>)
 8006370:	f7fa fc6a 	bl	8000c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006374:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <HAL_PCD_MspInit+0xa0>)
 8006376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006378:	4a0e      	ldr	r2, [pc, #56]	; (80063b4 <HAL_PCD_MspInit+0xa0>)
 800637a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637e:	6353      	str	r3, [r2, #52]	; 0x34
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_PCD_MspInit+0xa0>)
 8006386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006388:	4a0a      	ldr	r2, [pc, #40]	; (80063b4 <HAL_PCD_MspInit+0xa0>)
 800638a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800638e:	6453      	str	r3, [r2, #68]	; 0x44
 8006390:	4b08      	ldr	r3, [pc, #32]	; (80063b4 <HAL_PCD_MspInit+0xa0>)
 8006392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800639c:	2200      	movs	r2, #0
 800639e:	2100      	movs	r1, #0
 80063a0:	2043      	movs	r0, #67	; 0x43
 80063a2:	f7fa fc1a 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80063a6:	2043      	movs	r0, #67	; 0x43
 80063a8:	f7fa fc33 	bl	8000c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80063ac:	bf00      	nop
 80063ae:	3728      	adds	r7, #40	; 0x28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40023800 	.word	0x40023800
 80063b8:	40020000 	.word	0x40020000

080063bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f7fe fcd0 	bl	8004d78 <USBD_LL_SetupStage>
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80063f2:	78fa      	ldrb	r2, [r7, #3]
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	4619      	mov	r1, r3
 800640a:	f7fe fd0a 	bl	8004e22 <USBD_LL_DataOutStage>
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	460b      	mov	r3, r1
 8006420:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006428:	78fa      	ldrb	r2, [r7, #3]
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	4613      	mov	r3, r2
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	1a9b      	subs	r3, r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	440b      	add	r3, r1
 8006436:	3348      	adds	r3, #72	; 0x48
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	4619      	mov	r1, r3
 800643e:	f7fe fd53 	bl	8004ee8 <USBD_LL_DataInStage>
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe fe67 	bl	800512c <USBD_LL_SOF>
}
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800646e:	2301      	movs	r3, #1
 8006470:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]
 800647e:	e008      	b.n	8006492 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d102      	bne.n	800648e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006488:	2301      	movs	r3, #1
 800648a:	73fb      	strb	r3, [r7, #15]
 800648c:	e001      	b.n	8006492 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800648e:	f7fa f94d 	bl	800072c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006498:	7bfa      	ldrb	r2, [r7, #15]
 800649a:	4611      	mov	r1, r2
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe fe07 	bl	80050b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe fdb3 	bl	8005014 <USBD_LL_Reset>
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fe02 	bl	80050d0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6812      	ldr	r2, [r2, #0]
 80064da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80064ec:	4b04      	ldr	r3, [pc, #16]	; (8006500 <HAL_PCD_SuspendCallback+0x48>)
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	4a03      	ldr	r2, [pc, #12]	; (8006500 <HAL_PCD_SuspendCallback+0x48>)
 80064f2:	f043 0306 	orr.w	r3, r3, #6
 80064f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	e000ed00 	.word	0xe000ed00

08006504 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe fdf2 	bl	80050fc <USBD_LL_Resume>
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006532:	78fa      	ldrb	r2, [r7, #3]
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe fe40 	bl	80051bc <USBD_LL_IsoOUTIncomplete>
}
 800653c:	bf00      	nop
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006556:	78fa      	ldrb	r2, [r7, #3]
 8006558:	4611      	mov	r1, r2
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fe08 	bl	8005170 <USBD_LL_IsoINIncomplete>
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fe46 	bl	8005208 <USBD_LL_DevConnected>
}
 800657c:	bf00      	nop
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe fe43 	bl	800521e <USBD_LL_DevDisconnected>
}
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d13c      	bne.n	800662a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80065b0:	4a20      	ldr	r2, [pc, #128]	; (8006634 <USBD_LL_Init+0x94>)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a1e      	ldr	r2, [pc, #120]	; (8006634 <USBD_LL_Init+0x94>)
 80065bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80065c0:	4b1c      	ldr	r3, [pc, #112]	; (8006634 <USBD_LL_Init+0x94>)
 80065c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80065c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80065c8:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <USBD_LL_Init+0x94>)
 80065ca:	2204      	movs	r2, #4
 80065cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80065ce:	4b19      	ldr	r3, [pc, #100]	; (8006634 <USBD_LL_Init+0x94>)
 80065d0:	2202      	movs	r2, #2
 80065d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80065d4:	4b17      	ldr	r3, [pc, #92]	; (8006634 <USBD_LL_Init+0x94>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80065da:	4b16      	ldr	r3, [pc, #88]	; (8006634 <USBD_LL_Init+0x94>)
 80065dc:	2202      	movs	r2, #2
 80065de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80065e0:	4b14      	ldr	r3, [pc, #80]	; (8006634 <USBD_LL_Init+0x94>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80065e6:	4b13      	ldr	r3, [pc, #76]	; (8006634 <USBD_LL_Init+0x94>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80065ec:	4b11      	ldr	r3, [pc, #68]	; (8006634 <USBD_LL_Init+0x94>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80065f2:	4b10      	ldr	r3, [pc, #64]	; (8006634 <USBD_LL_Init+0x94>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80065f8:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <USBD_LL_Init+0x94>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80065fe:	480d      	ldr	r0, [pc, #52]	; (8006634 <USBD_LL_Init+0x94>)
 8006600:	f7fa fcbf 	bl	8000f82 <HAL_PCD_Init>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800660a:	f7fa f88f 	bl	800072c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800660e:	2180      	movs	r1, #128	; 0x80
 8006610:	4808      	ldr	r0, [pc, #32]	; (8006634 <USBD_LL_Init+0x94>)
 8006612:	f7fb fe1c 	bl	800224e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006616:	2240      	movs	r2, #64	; 0x40
 8006618:	2100      	movs	r1, #0
 800661a:	4806      	ldr	r0, [pc, #24]	; (8006634 <USBD_LL_Init+0x94>)
 800661c:	f7fb fdd0 	bl	80021c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006620:	2280      	movs	r2, #128	; 0x80
 8006622:	2101      	movs	r1, #1
 8006624:	4803      	ldr	r0, [pc, #12]	; (8006634 <USBD_LL_Init+0x94>)
 8006626:	f7fb fdcb 	bl	80021c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	200018dc 	.word	0x200018dc

08006638 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800664e:	4618      	mov	r0, r3
 8006650:	f7fa fdb4 	bl	80011bc <HAL_PCD_Start>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	4618      	mov	r0, r3
 800665c:	f000 f942 	bl	80068e4 <USBD_Get_USB_Status>
 8006660:	4603      	mov	r3, r0
 8006662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006664:	7bbb      	ldrb	r3, [r7, #14]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	4608      	mov	r0, r1
 8006678:	4611      	mov	r1, r2
 800667a:	461a      	mov	r2, r3
 800667c:	4603      	mov	r3, r0
 800667e:	70fb      	strb	r3, [r7, #3]
 8006680:	460b      	mov	r3, r1
 8006682:	70bb      	strb	r3, [r7, #2]
 8006684:	4613      	mov	r3, r2
 8006686:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006696:	78bb      	ldrb	r3, [r7, #2]
 8006698:	883a      	ldrh	r2, [r7, #0]
 800669a:	78f9      	ldrb	r1, [r7, #3]
 800669c:	f7fb f998 	bl	80019d0 <HAL_PCD_EP_Open>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 f91c 	bl	80068e4 <USBD_Get_USB_Status>
 80066ac:	4603      	mov	r3, r0
 80066ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	460b      	mov	r3, r1
 80066c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066d4:	78fa      	ldrb	r2, [r7, #3]
 80066d6:	4611      	mov	r1, r2
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fb f9e1 	bl	8001aa0 <HAL_PCD_EP_Close>
 80066de:	4603      	mov	r3, r0
 80066e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 f8fd 	bl	80068e4 <USBD_Get_USB_Status>
 80066ea:	4603      	mov	r3, r0
 80066ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006712:	78fa      	ldrb	r2, [r7, #3]
 8006714:	4611      	mov	r1, r2
 8006716:	4618      	mov	r0, r3
 8006718:	f7fb fab9 	bl	8001c8e <HAL_PCD_EP_SetStall>
 800671c:	4603      	mov	r3, r0
 800671e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 f8de 	bl	80068e4 <USBD_Get_USB_Status>
 8006728:	4603      	mov	r3, r0
 800672a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800672c:	7bbb      	ldrb	r3, [r7, #14]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006750:	78fa      	ldrb	r2, [r7, #3]
 8006752:	4611      	mov	r1, r2
 8006754:	4618      	mov	r0, r3
 8006756:	f7fb fafe 	bl	8001d56 <HAL_PCD_EP_ClrStall>
 800675a:	4603      	mov	r3, r0
 800675c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f8bf 	bl	80068e4 <USBD_Get_USB_Status>
 8006766:	4603      	mov	r3, r0
 8006768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800676a:	7bbb      	ldrb	r3, [r7, #14]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006786:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800678c:	2b00      	cmp	r3, #0
 800678e:	da0b      	bge.n	80067a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	4613      	mov	r3, r2
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	1a9b      	subs	r3, r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	333e      	adds	r3, #62	; 0x3e
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	e00b      	b.n	80067c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	4613      	mov	r3, r2
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067e6:	78fa      	ldrb	r2, [r7, #3]
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fb f8cb 	bl	8001986 <HAL_PCD_SetAddress>
 80067f0:	4603      	mov	r3, r0
 80067f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 f874 	bl	80068e4 <USBD_Get_USB_Status>
 80067fc:	4603      	mov	r3, r0
 80067fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006800:	7bbb      	ldrb	r3, [r7, #14]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b086      	sub	sp, #24
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
 8006816:	460b      	mov	r3, r1
 8006818:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006828:	7af9      	ldrb	r1, [r7, #11]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	f7fb f9e4 	bl	8001bfa <HAL_PCD_EP_Transmit>
 8006832:	4603      	mov	r3, r0
 8006834:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	4618      	mov	r0, r3
 800683a:	f000 f853 	bl	80068e4 <USBD_Get_USB_Status>
 800683e:	4603      	mov	r3, r0
 8006840:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006842:	7dbb      	ldrb	r3, [r7, #22]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	607a      	str	r2, [r7, #4]
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	460b      	mov	r3, r1
 800685a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800686a:	7af9      	ldrb	r1, [r7, #11]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	f7fb f960 	bl	8001b34 <HAL_PCD_EP_Receive>
 8006874:	4603      	mov	r3, r0
 8006876:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	4618      	mov	r0, r3
 800687c:	f000 f832 	bl	80068e4 <USBD_Get_USB_Status>
 8006880:	4603      	mov	r3, r0
 8006882:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006884:	7dbb      	ldrb	r3, [r7, #22]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b082      	sub	sp, #8
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	460b      	mov	r3, r1
 8006898:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80068a0:	78fa      	ldrb	r2, [r7, #3]
 80068a2:	4611      	mov	r1, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fb f990 	bl	8001bca <HAL_PCD_EP_GetRxCount>
 80068aa:	4603      	mov	r3, r0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80068bc:	4b03      	ldr	r3, [pc, #12]	; (80068cc <USBD_static_malloc+0x18>)
}
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	200001a4 	.word	0x200001a4

080068d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	4603      	mov	r3, r0
 80068ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d817      	bhi.n	8006928 <USBD_Get_USB_Status+0x44>
 80068f8:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <USBD_Get_USB_Status+0x1c>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006911 	.word	0x08006911
 8006904:	08006917 	.word	0x08006917
 8006908:	0800691d 	.word	0x0800691d
 800690c:	08006923 	.word	0x08006923
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	73fb      	strb	r3, [r7, #15]
    break;
 8006914:	e00b      	b.n	800692e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006916:	2303      	movs	r3, #3
 8006918:	73fb      	strb	r3, [r7, #15]
    break;
 800691a:	e008      	b.n	800692e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800691c:	2301      	movs	r3, #1
 800691e:	73fb      	strb	r3, [r7, #15]
    break;
 8006920:	e005      	b.n	800692e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006922:	2303      	movs	r3, #3
 8006924:	73fb      	strb	r3, [r7, #15]
    break;
 8006926:	e002      	b.n	800692e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006928:	2303      	movs	r3, #3
 800692a:	73fb      	strb	r3, [r7, #15]
    break;
 800692c:	bf00      	nop
  }
  return usb_status;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <__libc_init_array>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4d0d      	ldr	r5, [pc, #52]	; (8006974 <__libc_init_array+0x38>)
 8006940:	4c0d      	ldr	r4, [pc, #52]	; (8006978 <__libc_init_array+0x3c>)
 8006942:	1b64      	subs	r4, r4, r5
 8006944:	10a4      	asrs	r4, r4, #2
 8006946:	2600      	movs	r6, #0
 8006948:	42a6      	cmp	r6, r4
 800694a:	d109      	bne.n	8006960 <__libc_init_array+0x24>
 800694c:	4d0b      	ldr	r5, [pc, #44]	; (800697c <__libc_init_array+0x40>)
 800694e:	4c0c      	ldr	r4, [pc, #48]	; (8006980 <__libc_init_array+0x44>)
 8006950:	f000 f820 	bl	8006994 <_init>
 8006954:	1b64      	subs	r4, r4, r5
 8006956:	10a4      	asrs	r4, r4, #2
 8006958:	2600      	movs	r6, #0
 800695a:	42a6      	cmp	r6, r4
 800695c:	d105      	bne.n	800696a <__libc_init_array+0x2e>
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	f855 3b04 	ldr.w	r3, [r5], #4
 8006964:	4798      	blx	r3
 8006966:	3601      	adds	r6, #1
 8006968:	e7ee      	b.n	8006948 <__libc_init_array+0xc>
 800696a:	f855 3b04 	ldr.w	r3, [r5], #4
 800696e:	4798      	blx	r3
 8006970:	3601      	adds	r6, #1
 8006972:	e7f2      	b.n	800695a <__libc_init_array+0x1e>
 8006974:	08006a1c 	.word	0x08006a1c
 8006978:	08006a1c 	.word	0x08006a1c
 800697c:	08006a1c 	.word	0x08006a1c
 8006980:	08006a20 	.word	0x08006a20

08006984 <memset>:
 8006984:	4402      	add	r2, r0
 8006986:	4603      	mov	r3, r0
 8006988:	4293      	cmp	r3, r2
 800698a:	d100      	bne.n	800698e <memset+0xa>
 800698c:	4770      	bx	lr
 800698e:	f803 1b01 	strb.w	r1, [r3], #1
 8006992:	e7f9      	b.n	8006988 <memset+0x4>

08006994 <_init>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	bf00      	nop
 8006998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699a:	bc08      	pop	{r3}
 800699c:	469e      	mov	lr, r3
 800699e:	4770      	bx	lr

080069a0 <_fini>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	bf00      	nop
 80069a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a6:	bc08      	pop	{r3}
 80069a8:	469e      	mov	lr, r3
 80069aa:	4770      	bx	lr
